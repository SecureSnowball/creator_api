import { DateTime } from 'luxon'
import User from 'App/Models/User'
import Env from '@ioc:Adonis/Core/Env'
import Mail from '@ioc:Adonis/Addons/Mail'
import Encryption from '@ioc:Adonis/Core/Encryption'
import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import { validator, schema, rules } from '@ioc:Adonis/Core/Validator'
import VerificationToken, { Reason } from 'App/Models/VerificationToken'

export default class EmailVerificationController {
  public async resendEmail({
    response,
    auth,
    @if(input.logging.enabled)
      logger,
    @endif
  }: HttpContextContract) {
    @if(input.logging.enabled)
      logger.info('EmailVerificationController.resendEmail')
    @endif
    const user = auth.user!
    if (user.emailVerifiedAt) {
      return response.badRequest('Email is already verified')
    }
    const email = user.email
    const verificationToken = await VerificationToken.query().where({ email }).firstOrFail()
    const encryptedEmail = Encryption.encrypt(email)

    await Mail.sendLater((message) => {
      message
        .to(verificationToken.email)
        .from(Env.get('MAIL_FROM_ADDRESS'))
        .subject('Verify your email')
        .htmlView('emails/emailVerification', {
          user,
          url: `${Env.get('UI_URL')}/email/verify?token=${
            verificationToken.token
          }&email=${encryptedEmail}`,
        })
    })
    return 'Email resent successfully'
  }

  public async verifyEmail({
    request,
    @if(input.logging.enabled)
      logger,
    @endif
  }: HttpContextContract) {
    @if(input.logging.enabled)
      logger.info('EmailVerificationController.verifyEmail')
    @endif
    const tokenVerificationScheam = schema.create({
      email: schema.string({ trim: true }, [rules.email(), rules.maxLength({{
        email.meta.maxLength || 256
      }})]),
      token: schema.string({ trim: true }, [rules.maxLength(128), rules.minLength(128)]),
    })
    const input = {
      email: Encryption.decrypt(request.input('email')),
      token: request.input('token'),
    }
    const { token, email } = await validator.validate({
      schema: tokenVerificationScheam,
      data: input,
    })
    const verificationToken = await VerificationToken.query().where({ token, email }).firstOrFail()
    const user = await User.findByOrFail('email', email)
    user.emailVerifiedAt = DateTime.now()
    await user.save()
    await verificationToken.delete()
    return 'Email verified successfully'
  }

  public async updateEmail({
    request,
    @if(input.logging.enabled)
      logger,
    @endif
  }: HttpContextContract) {
    @if(input.logging.enabled)
      logger.info('EmailVerificationController.updateEmail')
    @endif
    const tokenVerificationScheam = schema.create({
      email: schema.string({ trim: true }, [rules.email(), rules.maxLength({{
        email.meta.maxLength || 256
      }})]),
      token: schema.string({ trim: true }, [rules.maxLength(128), rules.minLength(128)]),
    })
    const input = {
      email: Encryption.decrypt(request.input('email')),
      token: request.input('token'),
    }
    const { token, email } = await validator.validate({
      schema: tokenVerificationScheam,
      data: input,
    })
    const verificationToken = await VerificationToken.query()
      .where({ token, email, reason: Reason.emailUpdate })
      .firstOrFail()
    const user = await User.query().where({ id: verificationToken.userId! }).firstOrFail()
    user.emailVerifiedAt = DateTime.now()
    user.email = verificationToken.email
    await user.save()
    await verificationToken.delete()
    return 'Email updated successfully'
  }
}
