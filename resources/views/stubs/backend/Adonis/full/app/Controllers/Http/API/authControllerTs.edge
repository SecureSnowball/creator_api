@if(input.rbac.enabled)
  import Role from 'App/Models/Role'
@endif
import {{ table.names.pascalCase }} from 'App/Models/{{ table.names.pascalCase }}'
import LoginValidator from 'App/Validators/LoginValidator'
@if(input.auth.register)
  import RegisterValidator from 'App/Validators/RegisterValidator'
@endif
import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'


export default class AuthController {
  public async login({ request, auth }: HttpContextContract) {
    const input = await request.validate(LoginValidator)
    const { email, password } = input
    const token = await auth.use('api').attempt(email, password)
    const { token: tokenString } = token.toJSON()
    const user = auth.user!!

    return {
      token: tokenString,
      user: user,
    }
  }

  @if(input.auth.register)
  public async register({ request, auth }: HttpContextContract) {
    const input = await request.validate(RegisterValidator)
    @if (input.rbac.enabled)
      const defaultRole = await Role.findBy('default', true)
      input.roleId = defaultRole.id
    @endif

    /**
     * Create a new user
     */
    const user = await {{ table.names.pascalCase }}.create(input)
    await user.save()
    const token = await auth.use('api').login(user)
    const { token: tokenString } = token.toJSON()

    return {
      token: tokenString,
      user,
    }
  }
  @endif

  public async logout({ auth }: HttpContextContract) {
    await auth.use('api').revoke()
    return 'You have been logged out'
  }

  public async me({ auth }: HttpContextContract) {
    return auth.user
  }
}
