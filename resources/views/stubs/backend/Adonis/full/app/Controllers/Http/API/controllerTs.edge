@set('belongsToAuth', table.relations.find(r => r.type === 'BelongsTo' && r.withModel === '$auth'))
@set('hasRelations', table.relations.length)
import {{ table.names.pascalCase }} from 'App/Models/{{ table.names.pascalCase }}';
@if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)~
  @each(parentTable in table.routeParentTables)
    import {{ parentTable.names.pascalCase }} from 'App/Models/{{ parentTable.names.pascalCase }}';
  @endeach
@endif
@if(table.operations.index && hasRelations)
  import { ExtractModelRelations } from '@ioc:Adonis/Lucid/Orm'
@endif
import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
@if(table.operations.store)
  import Store{{
    table.names.pascalCase
  }}Validator from 'App/Validators/Store{{ table.names.pascalCase }}Validator';
@endif
@if(table.columns.find(column => column.type === 'File'))
  import { Attachment } from '@ioc:Adonis/Addons/AttachmentLite'
@endif
@if(table.operations.update)~
  @if(!table.singleton)
    import Update{{
      table.names.pascalCase
    }}Validator from 'App/Validators/Update{{ table.names.pascalCase }}Validator';
  @endif
@endif
@if(table.operations.storeMany)
  import StoreMany{{
    table.names.pascalCase
  }}Validator from 'App/Validators/StoreMany{{ table.names.pascalCase }}Validator';
@endif
@each(relation in table.relations.filter((r) => r.type === 'ManyToMany'))
  import {{ relation.modelNames.pascalCase }} from 'App/Models/{{ relation.modelNames.pascalCase }}';
@endeach

export default class {{ table.names.pascalCasePlural }}Controller {
  @if(table.operations.index && !table.singleton)
    public async index({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:index`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.index')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:index`))
        await bouncer.authorize('{{ table.names.camelCase }}:index')
      @endif
      const page = request.input('page', 1)
      const size = request.input('size', 10)
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const queryBuilder = {{ table.names.pascalCase }}.query()

      @if(belongsToAuth)
        queryBuilder.where('{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }}', auth.user!.id)
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        queryBuilder.where('{{ table.routeParentTables[lastIndex].names.camelCase }}Id', {{ table.routeParentTables[lastIndex].names.camelCase }}Id)
      @endif

      @each(column in table.columns.filter(c => c.meta.filterable))
        if (request.input('{{ input.camelCaseStrategy ? column.names.camelCase : column.names.snakeCase }}')) {
          queryBuilder.where('{{
            input.camelCaseStrategy ? column.names.camelCase : column.names.snakeCase
          }}',
          @if(column.type === 'String')
            'like',
          @endif
          `%${request.input('{{ input.camelCaseStrategy ? column.names.camelCase : column.names.snakeCase }}')}%`);
        }
      @endeach

      @if(hasRelations)
        const relationsString: string = request.input('relations')
        let preLoadRelation: string[] = []
        if (relationsString) {
          preLoadRelation = relationsString.split(',')
        }
        if (preLoadRelation.length) {
          preLoadRelation.forEach((relation) => {
            queryBuilder.preload(relation as ExtractModelRelations<{{ table.names.pascalCase }}>)
          })
        }
      @endif
      return queryBuilder.paginate(page, size)
    }
  @endif

  @if(table.operations.store)
    public async store({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:storeMany`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.store')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:store`))
        await bouncer.authorize('{{ table.names.camelCase }}:store')
      @endif
      const input: { [key: string]: any } = await request.validate(Store{{
        table.names.pascalCase
      }}Validator)
      @if(belongsToAuth)
        input.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @each(fileColumn in table.columns.filter(column => column.type === 'File' && column.meta.expose !== false))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        }
        @if(!fileColumn.meta.required)
          else {
            delete input.{{
              input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
            }}
          }
        @endif
      @endeach
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        input.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if(table.singleton)
        const condition: { [key: string]: any } = {}
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
          @set('lastIndex', table.routeParentTables?.length - 1)
          condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
            table.routeParentTables[lastIndex].names.camelCase
          }}Id
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).first()
        if ({{ table.names.camelCase }}) {
          {{ table.names.camelCase }}.merge(input)
          await {{ table.names.camelCase }}.save()
          return {{ table.names.camelCase }}
        }
        return {{ table.names.pascalCase }}.create(input)
      @else
        return {{ table.names.pascalCase }}.create(input)
      @endif
    }
  @endif

  @if(table.operations.storeMany)
    public async csvTemplate({ response }: HttpContextContract) {
      const content = [
      @each (column in table.columns.filter((c) => c.type !== 'File'))
        '{{ column.names.camelCase }}',
      @endeach
      ].join()
      response.header("Content-Disposition", 'attachment; filename="{{ table.names.pascalCase }}Template.csv"')
      return response.send(content)
    }

    public async storeMany({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:storeMany`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.storeMany')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:storeMany`))
        await bouncer.authorize('{{ table.names.camelCase }}:storeMany')
      @endif
      const inputs: { [key: string]: any } = await request.validate(StoreMany{{ table.names.pascalCase }}Validator)
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      return {{ table.names.pascalCase }}.createMany(
        inputs.items.map((input) => {
          @if(belongsToAuth)
            input.{{
              input.camelCaseStrategy ?
                `${input.auth.table.names.camelCase}Id` :
                `${input.auth.table.names.snakeCase}_id`
            }} = auth.user!.id
          @endif
          @each(fileColumn in table.columns.filter(column => column.type === 'File'))
            delete input.{{
              input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
            }}
          @endeach
          @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
            @set('lastIndex', table.routeParentTables?.length - 1)
            input.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
              table.routeParentTables[lastIndex].names.camelCase
            }}Id
          @endif
          return input
        })
      )
    }
  @endif

  @if(table.operations.show)
    public async show({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:show`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.show')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:show`))
        await bouncer.authorize('{{ table.names.camelCase }}:show')
      @endif
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if(!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      return {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
    }
  @endif

  @if(table.operations.update && !table.singleton)
    public async update({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:update`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.update')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:update`))
        await bouncer.authorize('{{ table.names.camelCase }}:update')
      @endif
      const input: { [key: string]: any } = await request.validate(Update{{ table.names.pascalCase }}Validator)
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const id = request.param('id')
      const condition: { [key: string]: any } = { id }
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
        input.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @each(fileColumn in table.columns.filter(column => column.type === 'File' && column.meta.expose !== false))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        } else {
          delete input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }}
        }
      @endeach
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      {{ table.names.camelCase }}.merge(input)
      await {{ table.names.camelCase }}.save()
      return {{ table.names.camelCase }}
    }
  @endif

  @if(table.operations.destroy)
    public async destroy({
      request,
      response,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroy`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.destroy')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroy`))
        await bouncer.authorize('{{ table.names.camelCase }}:destroy')
      @endif
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if (!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      await {{ table.names.camelCase }}.delete()
      return response.status(204)
    }
  @endif

  @if(table.operations.destroyMany)
    public async destroyMany({
      request,
      @if(belongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroyMany`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.destroyMany')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroyMany`))
        await bouncer.authorize('{{ table.names.camelCase }}:destroyMany')
      @endif
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
        @set('lastIndex', table.routeParentTables?.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      return {{ table.names.pascalCase }}.query().where(condition).whereIn('id', request.input('ids')).delete()
    }
  @endif

  @if(Array.isArray(table.customOperations) && table.customOperations.length)~
    @each(operation in table.customOperations)
      public async {{ operation.name }}({ {
        request,
        @if(belongsToAuth)
          auth,
        @endif
        @if(permissions.includes(`${table.names.camelCase}:${operation.name}`))
          bouncer,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }: HttpContextContract) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.{{ operation.name }}')
        @endif
        @if(permissions.includes(`${table.names.camelCase}:${operation.name}`))
          await bouncer.authorize('{{ table.names.camelCase }}:{{ operation.name }}')
        @endif
        // TODO: CRITICAL: Implementation pending
        const condition: { [key: string]: any } = {}
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(operation.singular)
          const id = request.param('id')
          condition.id = id
          condition.{{ input.auth.table.names.camelCase }} = auth.user!.id
        @endif
      }
    @endeach
  @endif

  @each(relation in table.relations.filter((relation) => relation.type === 'ManyToMany'))
    @set('relationModel', relation.withModel === '$auth' ? input.auth.table : input.tables.find((table) => table.names.camelCase === relation.modelNames.camelCase))
    @if(relationModel)
      @set('relationModelBelongsToAuth', relationModel.relations.find(r => r.type === 'BelongsTo' && r.withModel === '$auth'))
      public async attach{{ relation.modelNames.pascalCase }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{ relation.modelNames.pascalCasePlural }}')
        @endif
        @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id;
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
          @set('lastIndex', table.routeParentTables?.length - 1)
          condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
            table.routeParentTables[lastIndex].names.camelCase
          }}Id
        @endif
        const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail();
        const {{ relation.modelNames.camelCase }} = await {{ relation.modelNames.pascalCase }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${input.auth.table.names.camelCase}Id` :
                `${input.auth.table.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).firstOrFail()

        await {{ table.names.camelCase }}.related('{{ relation.modelNames.camelCasePlural }}').attach([{{ relation.modelNames.camelCase }}.id])
        await {{ table.names.camelCase }}.load('{{ relation.modelNames.camelCasePlural }}')
        return {{ table.names.camelCase }}
      }

      public async detach{{ relation.modelNames.pascalCase }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{ relation.modelNames.pascalCasePlural }}')
        @endif
        @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id;
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id;
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
          @set('lastIndex', table.routeParentTables?.length - 1)
          condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
            table.routeParentTables[lastIndex].names.camelCase
          }}Id
        @endif
        const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail();
        const {{ relation.modelNames.camelCase }} = await {{ relation.modelNames.pascalCase }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${input.auth.table.names.camelCase}Id` :
                `${input.auth.table.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).firstOrFail()

        await {{ table.names.camelCase }}.related('{{ relation.modelNames.camelCasePlural }}').detach([{{ relation.modelNames.camelCase }}.id]);
        await {{ table.names.camelCase }}.load('{{ relation.modelNames.camelCasePlural }}');
        return {{ table.names.camelCase }};
      }

      public async sync{{ relation.modelNames.pascalCasePlural }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{ relation.modelNames.pascalCasePlural }}')
        @endif
        const ids: number[] = request.input('ids');
        @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id;
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables?.length)
          @set('lastIndex', table.routeParentTables?.length - 1)
          condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
            table.routeParentTables[lastIndex].names.camelCase
          }}Id
        @endif
        const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail();
        const {{ relation.modelNames.camelCasePlural }} = await {{ relation.modelNames.pascalCase }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${input.auth.table.names.camelCase}Id` :
                `${input.auth.table.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).whereIn('id', ids)
        if ({{ relation.modelNames.camelCasePlural }}.length) {
          await {{ table.names.camelCase }}.related('{{ relation.modelNames.camelCasePlural }}').sync({{ relation.modelNames.camelCasePlural }}.map(i => i.id));
        }
        await {{ table.names.camelCase }}.load('{{ relation.modelNames.camelCasePlural }}');
        return {{ table.names.camelCase }};
      }
    @else
      // Debug: Relation: {{ relation }} {{ relation.modelNames.camelCase }}. Table: {{ table.name }}
    @endif
  @endeach
}
