@set('belongsToAuth', table.relations.find(r => r.type === 'BelongsTo' && r.withModel === '$auth'))
@set(
  'routeParentBelongsToAuth',
  !!table.routeParentRelations.find(
    r => findRelationModel(input, r)
      .relations.find(rr => rr.withModel === '$auth')
  )
)
@set('hasRelations', table.relations.length)
@set('hasM2MRelationOnCreatePage', table.relations.find(
  r => r.type === 'ManyToMany' && r.showInputOnCreatePage
))
{{--  Import Models: Import relation and parent route models  --}}
import {{ table.names.pascalCase }} from 'App/Models/{{ table.names.pascalCase }}';
@set('models', table.routeParentRelations
  .map((r) => r.modelNames.pascalCase)
  .concat(
    table.relations.filter((r) => r.type === 'ManyToMany')
      .map((r) => r.modelNames.pascalCase)
))
@each(model in Array.from(new Set(models)))
  import {{ model }} from 'App/Models/{{ model }}';
@endeach
{{--  Required for loading relations  --}}
@if((table.operations.index || table.operations.show ) && hasRelations && !table.singleton)
  import { ExtractModelRelations } from '@ioc:Adonis/Lucid/Orm'
@endif
import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
@if(table.operations.store)
  import Store{{
    table.names.pascalCase
  }}Validator from 'App/Validators/Store{{ table.names.pascalCase }}Validator';
@endif
{{--  Requires for file upload to local, S3 or GCS  --}}
@if(table.columns.find(column => column.type === 'File'))
  import { Attachment } from '@ioc:Adonis/Addons/AttachmentLite'
@endif
@if(table.operations.update)~
  @if(!table.singleton)
    import Update{{
      table.names.pascalCase
    }}Validator from 'App/Validators/Update{{ table.names.pascalCase }}Validator';
  @endif
@endif
@if(table.operations.storeMany)
  import StoreMany{{
    table.names.pascalCase
  }}Validator from 'App/Validators/StoreMany{{ table.names.pascalCase }}Validator';
@endif
{{--  Many 2 many relation requires transaction  --}}
@if(hasM2MRelationOnCreatePage)
  import Database from '@ioc:Adonis/Lucid/Database'
@endif

export default class {{ table.names.pascalCasePlural }}Controller {
  {{--  Singletons don't have index method  --}}
  @if(table.operations.index && !table.singleton)
    public async index({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:index`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.index')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:index`))
        await bouncer.authorize('{{ table.names.camelCase }}:index')
      @endif

      const page = request.input('page', 1)
      const size = request.input('size', 10)
      const sortBy: string = request.input('sortBy', 'id')
      const sortType = request.input('sortType', 'asc')

      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })

      const queryBuilder = {{ table.names.pascalCase }}.query().orderBy(sortBy, sortType)
      @if(belongsToAuth)
        queryBuilder.where('{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }}', auth.user!.id)
      @endif
      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
        queryBuilder.where('{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }}', {{ parentRelation.names.camelCase }}Id)
      @endif

      {{--  Create filters for filterable columns  --}}
      @each(column in table.columns.filter(c => c.meta.filterable))
        if (request.input('{{
          input.camelCaseStrategy ?
            column.names.camelCase :
            column.names.snakeCase
          }}')) {
          queryBuilder.where('{{
            input.camelCaseStrategy ? column.names.camelCase : column.names.snakeCase
          }}',
          @if(column.type === 'String')
            'like',
          @endif
          `%${request.input('{{
            input.camelCaseStrategy ?
              column.names.camelCase :
              column.names.snakeCase
          }}')}%`);
        }
      @endeach

      {{--  Load requested relations  --}}
      @if(hasRelations)
        const relationsString: string = request.input('relations')
        let preLoadRelation: string[] = []
        if (relationsString) {
          preLoadRelation = relationsString.split(',')
        }
        if (preLoadRelation.length) {
          preLoadRelation.forEach((relation) => {
            queryBuilder.preload(relation as ExtractModelRelations<{{ table.names.pascalCase }}>)
          })
        }
      @endif

      return queryBuilder.paginate(page, size)
    }
  @endif

  @if(table.operations.store)
    public async store({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:store`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.store')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:store`))
        await bouncer.authorize('{{ table.names.camelCase }}:store')
      @endif

      {{--  Validate request  --}}
      const input: { [key: string]: any } = await request.validate(Store{{
        table.names.pascalCase
      }}Validator)
      @if(belongsToAuth)
        input.{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }} = auth.user!.id;
      @endif

      {{--  Handle route parents  --}}
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })
      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          input.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif

      {{--  Handle all files column  --}}
      @each(fileColumn in table.columns.filter(
        column => column.type === 'File' && column.meta.expose !== false
      ))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        }
        @if(!fileColumn.meta.required)
          else {
            delete input.{{
              input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
            }};
          }
        @endif
      @endeach

      {{--
        Here are 3 logic
        if
          - Item is singleton
        else
          - Item has many 2 many relation on create page
          - Item doesn't have many 2 many relation on create page
      --}}
      @if(table.singleton)
        const condition: { [key: string]: any } = {};
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${belongsToAuth.names.camelCase}Id` :
              `${belongsToAuth.names.snakeCase}_id`
          }} = auth.user!.id;
        @endif
        @if(table.routeParentRelations.length)
          @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          condition.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).first()
        if ({{ table.names.camelCase }}) {
          {{ table.names.camelCase }}.merge(input);
          await {{ table.names.camelCase }}.save();
          return {{ table.names.camelCase }};
        }
        return {{ table.names.pascalCase }}.create(input);
      @else
        @if(!hasM2MRelationOnCreatePage)
          {{--  If there is no many 2 many relation create object  --}}
          return {{ table.names.pascalCase }}.create(input);
        @else
          {{--  Handle many to many input  --}}
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            @set(
              'relationColumnName',
              input.camelCaseStrategy ?
                relation.names.camelCase + 'Ids':
                relation.names.snakeCase + '_ids'
            )
            const {{ relation.names.camelCase }}Ids: number[] = input.{{ relationColumnName }};
            delete input.{{ relationColumnName }};
          @endeach
          const trx = await Database.transaction()
          try {
            const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.create(input);
            @each(relation in table.relations.filter(
              r => r.type === 'ManyToMany' && r.showInputOnCreatePage
            ))
              @set(
                'relationColumnName',
                input.camelCaseStrategy ?
                  relation.names.camelCase + 'Ids' :
                  relation.names.snakeCase + '_ids'
              )
              if (Array.isArray({{ relation.names.camelCase }}Ids) && {{
                relation.names.camelCase
              }}Ids.length) {
                await {{ table.names.camelCase }}.related('{{
                  relation.names.camelCasePlural
                }}').attach({{ relation.names.camelCase }}Ids);
              }
            @endeach
            await trx.commit()
            return {{ table.names.camelCase }};
          } catch (e) {
            @if(input.logging.enabled)
              logger.error('{{ table.names.pascalCasePlural }}Controller.store');
            @endif
            await trx.rollback()
            throw e
          }
        @endif
      @endif
    }
  @endif

  @if(table.operations.storeMany)
    {{--  Returns CSV template  --}}
    public async csvTemplate({ response }: HttpContextContract) {
      const content = [
      @each (column in table.columns.filter((c) => c.type !== 'File'))
        '{{ column.names.camelCase }}',
      @endeach
      ].join()
      response.header("Content-Disposition", 'attachment; filename="{{
        table.names.pascalCase
      }}Template.csv"')
      return response.send(content)
    }

    public async storeMany({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:storeMany`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.storeMany')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:storeMany`))
        await bouncer.authorize('{{ table.names.camelCase }}:storeMany')
      @endif
      const inputs: { [key: string]: any } = await request.validate(StoreMany{{
        table.names.pascalCase
      }}Validator)

      {{--  Route parents  --}}
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })
      return {{ table.names.pascalCase }}.createMany(
        inputs.items.map((input) => {
          @if(belongsToAuth)
            input.{{
              input.camelCaseStrategy ?
                `${belongsToAuth.names.camelCase}Id` :
                `${belongsToAuth.names.snakeCase}_id`
            }} = auth.user!.id
          @endif
          @each(fileColumn in table.columns.filter(column => column.type === 'File'))
            delete input.{{
              input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
            }}
          @endeach
          @if(table.routeParentRelations.length)
            @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
            input.{{
              input.camelCaseStrategy ?
                `${parentRelation.names.camelCase}Id` :
                `${parentRelation.names.snakeCase}_id`
            }} = {{ parentRelation.names.camelCase }}Id;
          @endif
          return input
        })
      )
    }
  @endif

  @if(table.operations.show)
    public async show({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:show`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.show')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:show`))
        await bouncer.authorize('{{ table.names.camelCase }}:show')
      @endif
      {{--  Route parents  --}}
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })

      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }} = auth.user!.id
      @endif

      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
        condition.{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }} = {{ parentRelation.names.camelCase }}Id;
      @endif
      
      @if(!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      @if(hasRelations)
        const queryBuilder = {{ table.names.pascalCase }}.query()
        const relationsString: string = request.input('relations')
        let preLoadRelation: string[] = []
        if (relationsString) {
          preLoadRelation = relationsString.split(',')
        }
        if (preLoadRelation.length) {
          preLoadRelation.forEach((relation) => {
            queryBuilder.preload(relation as ExtractModelRelations<{{
              table.names.pascalCase
            }}>)
          })
        }
        return queryBuilder.where(condition).firstOrFail()
      @else
        return {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      @endif
    }
  @endif

  @if(table.operations.update && !table.singleton)
    public async update({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:update`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.update')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:update`))
        await bouncer.authorize('{{ table.names.camelCase }}:update')
      @endif
      const input: { [key: string]: any } = await request.validate(Update{{
        table.names.pascalCase
      }}Validator)
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })
      const id = request.param('id')
      const condition: { [key: string]: any } = { id }
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
        condition.{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }} = {{ parentRelation.names.camelCase }}Id;
        input.{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }} = {{ parentRelation.names.camelCase }}Id;
      @endif
      {{--  Handle file columns  --}}
      @each(fileColumn in table.columns.filter(
        column => column.type === 'File' && column.meta.expose !== false
      ))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        } else {
          delete input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }}
        }
      @endeach
      const {{ table.names.camelCase }} = await {{
        table.names.pascalCase
      }}.query().where(condition).firstOrFail()
      {{--  Handle many2many relation on update page - 1  --}}
      @if(hasM2MRelationOnCreatePage)
        const trx = await Database.transaction()
        try {
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            @set(
              'relationColumnName',
              input.camelCaseStrategy ?
                relation.names.camelCase + 'Ids' :
                relation.names.snakeCase + '_ids'
            )
            const {{ relation.names.camelCase }}Ids: number[] = input.{{ relationColumnName }}
            delete input.{{ relationColumnName }}
            if (Array.isArray({{ relation.names.camelCase }}Ids) && {{
              relation.names.camelCase
            }}Ids.length) {
              await {{ table.names.camelCase }}.related('{{
                relation.names.camelCasePlural
              }}').sync({{ relation.names.camelCase }}Ids)
            }
          @endeach
      @endif
      {{ table.names.camelCase }}.merge(input)
      await {{ table.names.camelCase }}.save()
      return {{ table.names.camelCase }}
      {{--  Handle many2many relation on update page - 1  --}}
      @if(hasM2MRelationOnCreatePage)
        } catch (e) {
          @if(input.logging.enabled)
            logger.error('{{ table.names.pascalCasePlural }}Controller.update')
          @endif
          await trx.rollback()
          throw e
        }
      @endif
    }
  @endif

  @if(table.operations.destroy)
    public async destroy({
      @if (!table.singleton && table.routeParentRelations.length)
        request,
      @endif
      response,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroy`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.destroy')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroy`))
        await bouncer.authorize('{{ table.names.camelCase }}:destroy')
      @endif
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
        condition.{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }} = {{ parentRelation.names.camelCase }}Id;
      @endif
      @if (!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      const {{ table.names.camelCase }} = await {{
        table.names.pascalCase
      }}.query().where(condition).firstOrFail()
      await {{ table.names.camelCase }}.delete()
      return response.status(204)
    }
  @endif

  @if(table.operations.destroyMany)
    public async destroyMany({
      request,
      @if(belongsToAuth || routeParentBelongsToAuth)
        auth,
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroyMany`))
        bouncer,
      @endif
      @if(input.logging.enabled)
        logger,
      @endif
    }: HttpContextContract) {
      @if(input.logging.enabled)
        logger.info('{{ table.names.pascalCasePlural }}Controller.destroyMany')
      @endif
      @if(permissions.includes(`${table.names.camelCase}:destroyMany`))
        await bouncer.authorize('{{ table.names.camelCase }}:destroyMany')
      @endif
      @!component(`stubs/backend/${
        input.tech.backend
      }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(belongsToAuth)
        condition.{{
          input.camelCaseStrategy ?
            `${belongsToAuth.names.camelCase}Id` :
            `${belongsToAuth.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(table.routeParentRelations.length)
        @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
        condition.{{
          input.camelCaseStrategy ?
            `${parentRelation.names.camelCase}Id` :
            `${parentRelation.names.snakeCase}_id`
        }} = {{ parentRelation.names.camelCase }}Id;
      @endif
      return {{
        table.names.pascalCase
      }}.query().where(condition).whereIn('id', request.input('ids')).delete()
    }
  @endif

  @if(Array.isArray(table.customOperations) && table.customOperations.length)~
    @each(operation in table.customOperations)
      public async {{ operation.name }}({
        request,
        @if(belongsToAuth || routeParentBelongsToAuth)
          auth,
        @endif
        @if(permissions.includes(`${table.names.camelCase}:${operation.name}`))
          bouncer,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }: HttpContextContract) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.{{ operation.name }}')
        @endif
        @if(permissions.includes(`${table.names.camelCase}:${operation.name}`))
          await bouncer.authorize('{{ table.names.camelCase }}:{{ operation.name }}')
        @endif
        @!component(`stubs/backend/${
          input.tech.backend
        }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
          input, table
        })

        // TODO: CRITICAL: Implementation pending
        const condition: { [key: string]: any } = {}
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${belongsToAuth.names.camelCase}Id` :
              `${belongsToAuth.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(operation.singular)
          const id = request.param('id')
          condition.id = id
        @endif
        @if(table.routeParentRelations.length)
          @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          condition.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif
      }
    @endeach
  @endif

  @each(relation in table.relations.filter((relation) => relation.type === 'ManyToMany'))
    @set(
      'relationModel',
      ['$auth', '$nonAuth'].includes(relation.withModel) ?
        input.auth.table :
        input.tables.find((table) => table.names.camelCase === relation.modelNames.camelCase)
    )
    @if(relationModel)
      @set(
        'relationModelBelongsToAuth',
        relationModel.relations.find(r => r.type === 'BelongsTo' && r.withModel === '$auth')
      )
      public async attach{{ relation.names.pascalCase }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{
            relation.modelNames.pascalCasePlural
          }}')
        @endif
        @!component(`stubs/backend/${
          input.tech.backend
        }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${belongsToAuth.names.camelCase}Id` :
              `${belongsToAuth.names.snakeCase}_id`
          }} = auth.user!.id;
        @endif
        @if(table.routeParentRelations.length)
          @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          condition.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).firstOrFail();
        const {{
          relation.modelNames.camelCase
        }} = await {{ relation.modelNames.pascalCase }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${relationModelBelongsToAuth.names.camelCase}Id` :
                `${relationModelBelongsToAuth.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).firstOrFail()

        await {{ table.names.camelCase }}.related('{{
          relation.names.camelCasePlural
        }}').attach([{{ relation.modelNames.camelCase }}.id])
        await {{ table.names.camelCase }}.load('{{ relation.names.camelCasePlural }}')
        return {{ table.names.camelCase }}
      }

      public async detach{{ relation.names.pascalCase }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{
            relation.modelNames.pascalCasePlural
          }}')
        @endif
        @!component(`stubs/backend/${
          input.tech.backend
        }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id;
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${belongsToAuth.names.camelCase}Id` :
              `${belongsToAuth.names.snakeCase}_id`
          }} = auth.user!.id;
        @endif
        @if(table.routeParentRelations.length)
          @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          condition.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).firstOrFail();
        const {{ relation.modelNames.camelCase }} = await {{
          relation.modelNames.pascalCase
        }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${relationModelBelongsToAuth.names.camelCase}Id` :
                `${relationModelBelongsToAuth.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).firstOrFail()

        await {{ table.names.camelCase }}.related('{{
          relation.names.camelCasePlural
        }}').detach([{{ relation.modelNames.camelCase }}.id]);
        await {{ table.names.camelCase }}.load('{{ relation.names.camelCasePlural }}');
        return {{ table.names.camelCase }};
      }

      public async sync{{ relation.names.pascalCasePlural }}({
        request,
        @if(belongsToAuth || relationModelBelongsToAuth)
          auth,
        @endif
        @if(input.logging.enabled)
          logger,
        @endif
      }) {
        @if(input.logging.enabled)
          logger.info('{{ table.names.pascalCasePlural }}Controller.sync{{
            relation.modelNames.pascalCasePlural
          }}')
        @endif
        const ids: number[] = request.input('ids');
        @!component(`stubs/backend/${
          input.tech.backend
        }/full/app/Controllers/Http/API/component/routeParentRelationValidation`, {
          input, table
        })
        const condition: { [key: string]: any } = {};
        const id = request.param('id');
        condition.id = id;
        @if(belongsToAuth)
          condition.{{
            input.camelCaseStrategy ?
              `${belongsToAuth.names.camelCase}Id` :
              `${belongsToAuth.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(table.routeParentRelations.length)
          @set('parentRelation', table.routeParentRelations[table.routeParentRelations.length - 1])
          condition.{{
            input.camelCaseStrategy ?
              `${parentRelation.names.camelCase}Id` :
              `${parentRelation.names.snakeCase}_id`
          }} = {{ parentRelation.names.camelCase }}Id;
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).firstOrFail();
        const {{ relation.modelNames.camelCasePlural }} = await {{
          relation.modelNames.pascalCase
        }}.query().where({
          id: request.param('{{ relation.modelNames.camelCase }}Id'),
          @if(relationModelBelongsToAuth)
            {{
              input.camelCaseStrategy ?
                `${relationModelBelongsToAuth.names.camelCase}Id` :
                `${relationModelBelongsToAuth.names.snakeCase}_id`
            }}: auth.user!.id,
          @endif
        }).whereIn('id', ids)
        if ({{ relation.modelNames.camelCasePlural }}.length) {
          await {{ table.names.camelCase }}.related('{{
            relation.names.camelCasePlural
          }}').sync({{ relation.modelNames.camelCasePlural }}.map(i => i.id));
        }
        await {{ table.names.camelCase }}.load('{{ relation.names.camelCasePlural }}');
        return {{ table.names.camelCase }};
      }
    @else
      // Debug: Relation: {{ relation }} {{
        relation.modelNames.camelCase
      }}. Table: {{ table.name }}
    @endif
  @endeach
}
