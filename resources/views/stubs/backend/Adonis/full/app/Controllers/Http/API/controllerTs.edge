import {{ table.names.pascalCase }} from 'App/Models/{{ table.names.pascalCase }}';
@if(table.operations.store)
  import Store{{
    table.names.pascalCase
  }}Validator from 'App/Validators/Store{{ table.names.pascalCase }}Validator';
@endif
@if(table.columns.find(column => column.type === 'File'))
import { Attachment } from '@ioc:Adonis/Addons/AttachmentLite'
@endif
import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
@if(table.operations.update)~
  @if(!table.singleton)
    import Update{{
      table.names.pascalCase
    }}Validator from 'App/Validators/Update{{ table.names.pascalCase }}Validator';
  @endif
@endif
@if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)~
  @each(parentTable in table.routeParentTables)
    import {{ parentTable.names.pascalCase }} from 'App/Models/{{ parentTable.names.pascalCase }}';
  @endeach
@endif

export default class {{ table.names.pascalCasePlural }}Controller {
  @if(table.operations.index && !table.singleton)
    public async index({
    @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
    auth,
    @endif
    request }: HttpContextContract) {
      const page = request.input('page', 1)
      const size = request.input('size', 10)
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {
        @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        {{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }}: auth.user!.id,
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
          @set('lastIndex', table.routeParentTables.length - 1)
          {{ table.routeParentTables[lastIndex].names.camelCase }}Id,
        @endif
      }
      return {{ table.names.pascalCase }}.query()
      .where(condition)
      .paginate(page, size)
    }
  @endif

  @if(table.operations.store)
    public async store({
    @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
    auth,
    @endif
    request }: HttpContextContract) {
      const input: { [key: string]: any } = await request.validate(Store{{
        table.names.pascalCase
      }}Validator)
      @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        input.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @each(fileColumn in table.columns.filter(column => column.type === 'File' && column.meta.expose !== false))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        }
      @if(!fileColumn.meta.required)
        else {
          delete input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }}
        }
      @endif
      @endeach
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
        @set('lastIndex', table.routeParentTables.length - 1)
        input.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if(table.singleton)
        const condition: { [key: string]: any } = {}
        @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
          @set('lastIndex', table.routeParentTables.length - 1)
          condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
            table.routeParentTables[lastIndex].names.camelCase
          }}Id
        @endif
        const {{ table.names.camelCase }} = await {{
          table.names.pascalCase
        }}.query().where(condition).first()
        if ({{ table.names.camelCase }}) {
          return {{ table.names.camelCase }}
            .merge(input)
            .save()
        }
        return {{ table.names.pascalCase }}.create(input)
      @else
        return {{ table.names.pascalCase }}.create(input)
      @endif
    }
  @endif

  @if(table.operations.show)
    public async show({
    @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
    auth,
    @endif
    request }: HttpContextContract) {
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
        @set('lastIndex', table.routeParentTables.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if(!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      return {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
    }
  @endif

  @if(table.operations.update && !table.singleton)
    public async update({
    @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
    auth,
    @endif
    request }: HttpContextContract) {
      const input: { [key: string]: any } = await request.validate(Update{{ table.names.pascalCase }}Validator)
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const id = request.param('id')
      const condition: { [key: string]: any } = { id }
      @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
        @set('lastIndex', table.routeParentTables.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
        input.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @each(fileColumn in table.columns.filter(column => column.type === 'File' && column.meta.expose !== false))
        if (input.{{
          input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
        }}) {
          input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }} = Attachment.fromFile(input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }})
        } else {
          delete input.{{
            input.camelCaseStrategy ? fileColumn.names.camelCase : fileColumn.names.snakeCase
          }}
        }
      @endeach
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      return {{ table.names.camelCase }}
        .merge(input)
        .save()
    }
  @endif

  @if(table.operations.destroy)
    public async destroy({
    @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
    auth,
    @endif
    request, response }: HttpContextContract) {
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
        @set('lastIndex', table.routeParentTables.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      @if (!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      await {{ table.names.camelCase }}.delete()
      return response.status(204)
    }
  @endif

  @if(table.operations.destroyMany)
    public async destroyMany({
      @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
      auth,
      @endif
      request }: HttpContextContract) {
      @!component(`stubs/backend/${input.tech.backend}/full/app/Controllers/Http/API/component/routeParentTableValidation`, {
        input, table
      })
      const condition: { [key: string]: any } = {}
      @if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
        @set('lastIndex', table.routeParentTables.length - 1)
        condition.{{ table.routeParentTables[lastIndex].names.camelCase }}Id = {{
          table.routeParentTables[lastIndex].names.camelCase
        }}Id
      @endif
      return {{ table.names.pascalCase }}.query().where(condition).whereIn('id', request.input('ids')).delete()
    }
  @endif

  @if(Array.isArray(table.customOperations) && table.customOperations.length)~
    @each(operation in table.customOperations)
      public async {{ operation.name }}({ {
        @if(table.relations.find(relation => relation.type === 'BelongsTo' && relation.withModel === '$auth'))
        auth,
        @endif
        request }: HttpContextContract) {
        const condition: { [key: string]: any } = {}
        @if(operation.singular)
          const id = request.param('id')
          condition.id = id
          condition.{{ input.auth.table.names.camelCase }} = auth.user!.id
        @endif
      }
    @endeach
  @endif
}
