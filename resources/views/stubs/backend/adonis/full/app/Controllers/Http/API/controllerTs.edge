import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import {{ table.names.pascalCase }} from 'App/Models/{{ table.names.pascalCase }}';
@if(table.operations.includes('store'))
  import Store{{
    table.names.pascalCase
  }}Validator from 'App/Validators/Store{{ table.names.pascalCase }}Validator';
@endif
@if(table.operations.includes('update'))
  @if(!table.singleton)
    import Update{{
      table.names.pascalCase
    }}Validator from 'App/Validators/Update{{ table.names.pascalCase }}Validator';
  @endif
@endif
@if(Array.isArray(table.routeParentTables) && table.routeParentTables.length)
  @each(parentTable in table.routeParentTables)
    import {{ parentTable.names.pascalCase }} from 'App/Models/{{ parentTable.names.pascalCase }}';
  @endeach
@endif

export default class {{ table.names.pascalCasePlural }}Controller {
  @if(table.operations.includes('index') && !table.singleton)
    public async index({ auth, request }: HttpContextContract) {
      const page = request.input('page', 1)
      const size = request.input('size', 10)
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach

      return {{ table.names.pascalCase }}.query()
      .where({
      @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
        {{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }}: auth.user!.id,
      @endif
      @if(Array.isArray(table.routeParents) && table.routeParents.length)
        @set('lastIndex', table.routeParents.length - 1)
        {{ table.routeParents[lastIndex] }}Id,
      @endif
      })
      .paginate(page, size)
    }
  @endif

  @if(table.operations.includes('store'))
    public async store({ auth, request }: HttpContextContract) {
      const input: { [key: string]: any } = await request.validate(Store{{
        table.names.pascalCase
      }}Validator)
      @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
        input.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach
      @if(table.singleton)
        const condition: { [key: string]: any } = {}
        @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          condition.{{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }} = auth.user!.id
        @endif
        const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).first()
        if ({{ table.names.camelCase }}) {
          return {{ table.names.camelCase }}
            .merge(input)
            .save()
        }
        return {{ table.names.pascalCase }}.create(input)
      @else
        return {{ table.names.pascalCase }}.create(input)
      @endif
    }
  @endif

  @if(table.operations.includes('show'))
    public async show({ auth, request }: HttpContextContract) {
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach
      const condition: { [key: string]: any } = {}
      @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if(!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      return {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
    }
  @endif

  @if(table.operations.includes('update') && !table.singleton)
    public async update({ auth, request }: HttpContextContract) {
      const input: { [key: string]: any } = await request.validate(Update{{ table.names.pascalCase }}Validator)
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach
      const id = request.param('id')
      const condition: { [key: string]: any } = { id }
      @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      return {{ table.names.camelCase }}
        .merge(input)
        .save()
    }
  @endif

  @if(table.operations.includes('destroy'))
    public async destroy({ auth, request, response }: HttpContextContract) {
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach
      const condition: { [key: string]: any } = {}
      @if(table.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
        condition.{{
          input.camelCaseStrategy ?
            `${input.auth.table.names.camelCase}Id` :
            `${input.auth.table.names.snakeCase}_id`
        }} = auth.user!.id
      @endif
      @if (!table.singleton)
        const id = request.param('id')
        condition.id = id
      @endif
      const {{ table.names.camelCase }} = await {{ table.names.pascalCase }}.query().where(condition).firstOrFail()
      await {{ table.names.camelCase }}.delete()
      return response.status(204)
    }
  @endif

  @if(table.operations.includes('destroyMany'))
    public async destroyMany({ request }: HttpContextContract) {
      @each(parentTable in table.routeParentTables)
        const {{ parentTable.names.camelCase }}Id = request.param('{{ parentTable.names.camelCase }}Id');
        await {{ parentTable.names.pascalCase }}.query().where({
          id: {{ parentTable.names.camelCase }}Id,
          @if(parentTable.relations.find(relation => relation.type === 'belongsTo' && relation.withModel === '$auth'))
          {{
            input.camelCaseStrategy ?
              `${input.auth.table.names.camelCase}Id` :
              `${input.auth.table.names.snakeCase}_id`
          }}: auth.user!.id,
          @endif
        }).firstOrFail()
      @endeach
      return {{ table.names.pascalCase }}.query().whereIn('id', request.input('ids')).delete()
    }
  @endif
}
