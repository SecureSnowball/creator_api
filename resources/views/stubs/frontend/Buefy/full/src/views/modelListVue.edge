<template>
  <section class="container mt-5">
    <b-loading is-full-page v-model="isLoading"></b-loading>
    <div class="level">
      <div class="level-left is-size-3">@{{ items.length }} {{ capitalCase(table.names.pascalCasePlural) }}</div>
      @if(table.operations.storeMany || table.operations.store || table.operations.destroyMany)
        <div
          class="level-right"
          v-if="authorize('{{ table.names.camelCase }}:storeMany') || authorize('{{ table.names.camelCase }}:destroyMany') || authorize('{{ table.names.camelCase }}:store')"
        >
          @if(table.operations.destroyMany)
            <b-button
              v-if="selectItems.length && authorize('{{ table.names.camelCase }}:destroyMany')"
              @click="destroyMany"
              type="is-danger"
            >
              Delete Selected
            </b-button>
          @endif
          @if(table.operations.storeMany)
            <b-dropdown
              v-if="authorize('{{ table.names.camelCase }}:storeMany')"
              aria-role="list"
              class="mx-1"
            >
              <template #trigger="{ active }">
                <b-button
                  label="Import From"
                  type="is-primary"
                  :icon-right="active ? 'menu-up' : 'menu-down'"
                />
              </template>
              <b-dropdown-item
                @click="$router.push('/{{ table.names.camelCase }}/import/csv')"
                aria-role="listitem"
              >CSV</b-dropdown-item>
            </b-dropdown>
          @endif
          @if(table.operations.create)
            <b-button tag="router-link" to="{{ table.inSetting ? '/setting': '' }}/{{ table.names.camelCase }}/create" type="is-light">New</b-button>
          @endif
        </div>
      @endif
    </div>
    <b-table
      v-if="items.length"
      :data="items"
      @if(table.operations.storeMany)
        :checked-rows.sync="selectItems"
        :checkable="authorize('{{ table.names.camelCase }}:destroyMany')"
      @endif
      hoverable
      striped
    >
      @each(column in table.indexColumns)
        @set('currentColumn', table.columns.find((c) => c.names.pascalCase === pascalCase(column)))
        <b-table-column field="{{ camelCase(column) }}" label="{{
          currentColumn.input.displayName || capitalCase(column)
        }}" v-slot="props" {{
          ['Decimal', 'Integer'].includes(currentColumn.type) ? 'numeric' : ''
        }}>
          @if('Decimal' === currentColumn.type && currentColumn.input.decimal.step !== 'any')
            @set('decimalCount', `${currentColumn.input.decimal.step}`.split('.')[1].length)
            {{{
              `{{ props.row.${camelCase(column)}.toFixed(${decimalCount}) }}`
            }}}
          @elseif (currentColumn.type === 'Date')
            {{{
              `new Date({{ props.row.${camelCase(column)} }}).toLocaleString()`
            }}}
          @else
            {{{
              `{{ props.row.${camelCase(column)} }}`
            }}}
          @endif
        </b-table-column>
      @endeach
      <b-table-column
        label="Action"
        @if(table.operations.edit && table.operations.destroy)
          v-slot="props"
        @endif
      >
         <b-dropdown aria-role="list">
            <template #trigger="{ active }">
              <b-button
                label="More"
                type="is-primary"
                outlined
                :icon-right="active ? 'menu-up' : 'menu-down'"
              />
            </template>
            @if(table.operations.edit)
              <b-dropdown-item
                v-if="authorize('{{ table.names.camelCase }}:edit')"
                @click="edit(props.row.id)"
                aria-role="edititem"
              >
                Edit
              </b-dropdown-item>
            @endif
            @if(table.operations.destroy)
              <b-dropdown-item
                v-if="authorize('{{ table.names.camelCase }}:destroy')"
                @click="destroy(props.row.id)"
                aria-role="listitem"
              >
                Delete
              </b-dropdown-item>
            @endif
        </b-dropdown>
      </b-table-column>
    </b-table>
    <div class="hero is-medium" v-else>
      <div class="hero-body container is-flex has-text-centered">
        <div class="is-flex-direction-colomn">
          @if(table.operations.create)
            <h1 class="is-size-2">Create a {{ capitalCase(table.names.pascalCase) }}</h1>
            <p class="is-size-4">Click new to create your first {{ noCase(table.names.pascalCasePlural) }}</p>
            <b-button
              v-if="authorize('{{ table.names.camelCase }}:create')"
              type="is-primary block mt-5"
              tag="router-link"
              to="/{{ table.names.camelCase }}/create"
            >
              New
            </b-button>
          @else
            <h1 class="is-size-2">There are no {{ capitalCase(table.names.pascalCase) }}</h1>
          @endif
        </div>
      </div>
    </div>
    <b-pagination
      v-if="meta.lastPage > 1"
      v-model="currentPageNo"
      :current.sync="currentPageNo"
      :total="meta.total"
      :per-page="meta.perPage"
      icon-prev="arrow-left"
      icon-next="arrow-right"
      order="is-centered"
      aria-next-label="Next page"
      aria-previous-label="Previous page"
      aria-page-label="Page"
      aria-current-label="Current page">
    </b-pagination>
  </section>
</template>

<script>
import { mapActions, mapState } from 'vuex';

export default {
  name: '{{ table.names.pascalCase }}List',

  data() {
    return {
      currentPageNo: 1,
      @if(table.operations.storeMany)
        selectItems: [],
      @endif
    };
  },

  created() {
    this.index();
  },

  methods: {
    ...mapActions('{{ table.names.camelCase }}', {
      indexAction: 'index',
      @if(table.operations.destroy)
        destroyAction: 'destroy',
      @endif
      @if(table.operations.destroyMany)
        destroyManyAction: "destroyMany",
      @endif
    }),
    @if(input.rbac.enabled)
      authorize(permission) {
        return this.permissions.indexOf(permission) !== -1;
      },
    @endif

    index() {
      this.indexAction({
        size: 10,
        page: this.currentPageNo,
      });
    },

    @if(table.operations.edit)
      edit(id) {
        this.$router.push(`{{ table.inSetting ? '/setting': '' }}/{{ table.names.camelCase }}/${id}/edit`);
      },
    @endif

    @if(table.operations.destroyMany)
      destroy(id) {
        this.$buefy.dialog.confirm({
          title: 'Deleting {{ capitalCase(table.names.pascalCase) }}',
          message: 'Are you sure you want to <b>delete</b> this {{ table.names.camelCase }}? Only unused {{ table.names.camelCase }} can be deleted',
          confirmText: 'Delete {{ capitalCase(table.names.pascalCase) }}',
          type: 'is-danger',
          hasIcon: true,
          onConfirm: async () => {
            try {
              await this.destroyAction(id);
              this.$buefy.toast.open({
                message: 'Deleted',
                type: 'is-success',
                position: 'is-bottom-right',
              });
            } catch(e) {
              console.error(e);
              this.$buefy.toast.open({
                message: 'Unable to delete',
                type: 'is-danger',
                position: 'is-bottom-right',
              });
            }
          },
        });
      },
    @endif

    @if(table.operations.destroyMany)
      destroyMany() {
        this.$buefy.dialog.confirm({
          title: 'Deleting {{ capitalCase(table.names.pascalCasePlural) }}',
          message:
            "Are you sure you want to <b>delete</b> these {{ noCase(table.names.pascalCasePlural) }}? Only unused {{ noCase(table.names.pascalCase) }} can be deleted",
          confirmText: 'Delete {{ capitalCase(table.names.pascalCasePlural) }}',
          type: "is-danger",
          hasIcon: true,
          onConfirm: async () => {
            try {
              await this.destroyManyAction(this.selectItems.map((i) => i.id));
              this.$buefy.toast.open({
                message: "Deleted",
                type: "is-success",
                position: "is-bottom-right",
              });
              this.currentPageNo = 1;
              this.selectItems = [];
              await this.index();
            } catch (e) {
              console.error(e);
              this.$buefy.toast.open({
                message: "Unable to delete",
                type: "is-danger",
                position: "is-bottom-right",
              });
            }
          },
        });
      },
    @endif
  },

  watch: {
    async currentPageNo() {
      return this.index();
    },
  },

  computed: {
    ...mapState('auth', {
      user: (state) => state.user,
      @if(input.rbac.enabled)
        permissions: (state) => state.permissions,
      @endif
    }),
    ...mapState('{{ table.names.camelCase }}', {
      items: (state) => state.items,
      meta: (state) => state.meta,
      loading: (state) => state.loading,
    }),
    isLoading() {
      return this.loading.index;
    },
  },
};
</script>
