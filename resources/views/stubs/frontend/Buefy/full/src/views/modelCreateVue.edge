@set('fileColumns', table.columns.filter(c => c.type === 'File'))
@set('fileColumnsLastIndex', fileColumns.length - 1)
@set('exposedColumns', table.columns.filter(c => c.meta.expose !== false))
@set(
  'nonAuthBelongsToRelations',
  table.relations.filter(r => r.type === 'BelongsTo' && r.withModel !== '$auth')
)
@set(
  'hasM2MRelationOnCreatePage',
  table.relations.find(r => r.type === 'ManyToMany' && r.showInputOnCreatePage)
)
<template>
  <section class="container">
    <b-loading is-full-page v-model="loading.show"></b-loading>
    <div class="section py-4">
      <div class="columns">
        <div class="column px-0">
          <div class="level">
            <div class="level-left is-size-3">@{{ editMode.enabled ? 'Update' : 'Create' }} {{
              capitalCase(table.names.pascalCase)
            }}</div>
            <div class="level-right"><b-button tag="router-link" to="/{{
              table.names.camelCase
            }}" type="is-white">Back</b-button></div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="section py-4">
      <div class="columns box">
        <div class="column">
          <form method="POST" @submit.prevent="editMode.enabled ? update() : store()">
            @each(column in exposedColumns)
            @if(column.type === 'String')
            <b-field
              horizontal
              label="{{ column.input?.displayName || capitalCase(column.names.pascalCase) }}{{
                column.meta.required ? ' *' : ''
              }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
            >
              @if(column.input?.type === 'Input')
              <b-input
                v-model="form.{{ column.names.camelCase }}"
                @if(column.meta.multiline)
                  type="textarea"
                @elseif(column.meta.email)
                  type="email"
                @endif
                @if(column.meta.maxLength !== undefined)
                  maxlength="{{ column.meta.maxLength }}"
                @endif
                @if(column.meta.minLength !== undefined)
                  minlength="{{ column.meta.minLength }}"
                @endif
                @if(column.meta.required)
                  required
                @endif
              ></b-input>
              @elseif(column.input?.type === 'Select')
              <b-select
                v-model="form.{{ column.names.camelCase }}"
                expanded
                @if(column.meta.required)
                  required
                @endif
              >
                @each(option in column.input?.select.options)
                  @if(option.value)
                    <option value="{{ option.value }}">{{ option.label }}</option>
                  @else
                    <option value="{{ option }}">{{ option }}</option>
                  @endif
                @endeach
              </b-select>
              @elseif(column.input?.type === 'Radio')
              @each(option in column.input?.radio.options)
              @if(option.value)
              <b-radio-button
                v-model="form.{{ column.names.camelCase }}"
                native-value="{{ option.value }}"
                type="is-primary is-outlined is-light"
              >
                <span>{{ option.label }}</span>
              </b-radio-button>
              @else
              <b-radio-button
                v-model="form.{{ column.names.camelCase }}"
                native-value="{{ option }}"
                type="is-primary is-outlined is-light"
              >
                <span>{{ option }}</span>
              </b-radio-button>
              @endif
              @endeach
              @endif
            </b-field>

            @elseif(column.type === 'Integer')
            <b-field
              horizontal
              label="{{
                column.input?.displayName || capitalCase(column.names.pascalCase)
              }}{{ column.meta.required ? ' *' : '' }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
            >
              <b-input
                v-model="form.{{ column.names.camelCase }}"
                type="number"
                @if(column.meta.max !== undefined)
                max="{{ column.meta.max }}"
                @endif
                @if(column.meta.min !== undefined)
                min="{{ column.meta.min }}"
                @endif
                @if(column.meta.required)
                required
                @endif
              ></b-input>
            </b-field>

            @elseif(column.type === 'Decimal')
            <b-field
              horizontal
              label="{{
                column.input?.displayName || capitalCase(column.names.pascalCase)
              }}{{ column.meta.required ? ' *' : '' }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
            >
              <b-input
                v-model="form.{{ column.names.camelCase }}"
                type="number"
                @if(column.input?.decimal.step !== undefined)
                step="{{ column.input?.decimal.step }}"
                @else
                step="any"
                @endif
                @if(column.meta.max !== undefined)
                max="{{ column.meta.max }}"
                @endif
                @if(column.meta.min !== undefined)
                min="{{ column.meta.min }}"
                @endif
                @if(column.meta.required)
                required
                @endif
              ></b-input>
            </b-field>

            @elseif(column.type === 'Boolean')
            <b-field
              horizontal
              label="{{
                column.input?.displayName || capitalCase(column.names.pascalCase)
              }}{{ column.meta.required ? ' *' : '' }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
            >
              <b-switch v-model="form.{{ column.names.camelCase }}">{{
                column.input?.displayName ?? column.names.camelCase
              }}</b-switch>
            </b-field>
            @elseif(column.type === 'Date')
            <b-field
              horizontal
              label="{{
                column.input?.displayName || capitalCase(column.names.pascalCase)
              }}{{ column.meta.required ? ' *' : '' }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
              open-on-focus
            >
              <b-datepicker v-model="form.{{ column.names.camelCase }}" />
            </b-field>
            @elseif(column.type === 'File')
            <b-field
              class="file" horizontal
              label="{{
                column.input?.displayName || capitalCase(column.names.pascalCase)
              }}{{ column.meta.required ? ' *' : '' }}"
              :type="errors.{{ column.names.camelCase }} ? 'is-danger' : ''"
              :message="errors.{{ column.names.camelCase }}"
            >
              <b-upload @input="onFileAdd($event, '{{
                column.names.camelCase
              }}')" v-model="form.{{ column.names.camelCase }}" expanded>
                <a class="button is-primary is-fullwidth">
                  <b-icon icon="upload"></b-icon>
                  <span>
                    {{{
                      `{{
                        (form.${column.names.camelCase} && form.${column.names.camelCase}.name) ||
                        'Select ${column.input?.displayName ||
                          capitalCase(column.names.pascalCase)}'
                      }}`
                    }}}
                  </span>
                </a>
              </b-upload>
              <b-button
                class="is-fullwidth"
                v-if="form.{{ column.names.camelCase }}"
                type="is-light"
                @click="form.{{ column.names.camelCase }} = null"
              >
                Clear file
              </b-button>
            </b-field>
            @endif
            @endeach

            @each(relation in nonAuthBelongsToRelations)
            @set(
              'relationModel',
              ['$auth', '$nonAuth'].includes(relation.withModel) ?
                input.auth.table :
                input.tables.find(
                  (table) => table.names.camelCase === relation.modelNames.camelCase
                )
            )
              <b-field
                label="{{ capitalCase(relation.names.pascalCase) }}"
                :type="errors.{{ relation.names.camelCase }} ? 'is-danger' : ''"
                :message="errors.{{ relation.names.camelCase }}"
                horizontal
              >
                <b-select
                  v-model="form.{{ relation.names.camelCase }}Id"
                  expanded
                  @if(relation.required)
                  required
                  @endif
                >
                  <option v-for="({{
                    relationModel.names.camelCase
                  }}, {{
                    relationModel.names.camelCase
                  }}Index) in {{ relationModel.names.camelCasePlural }}" :key="{{
                    relationModel.names.camelCase
                  }}Index" :value="{{
                    relationModel.names.camelCase
                  }}.id">
                    {{
                      safe(`{{ ${relationModel.names.camelCase}.${relationModel.defaultColumn} }}`)
                    }}
                  </option>
                </b-select>
              </b-field>
            @endeach

            @each(relation in table.relations.filter(
              r => r.type === 'ManyToMany' && r.showInputOnCreatePage)
            )
              @set(
                'relationModel',
                ['$auth', '$nonAuth'].includes(relation.withModel) ?
                  input.auth.table :
                  input.tables.find(
                    (table) => table.names.camelCase === relation.modelNames.camelCase
                  )
              )
              @if(relationModel)
                <b-field
                  label="{{ capitalCase(relation.names.pascalCasePlural) }}"
                  :type="errors.{{ relation.names.camelCasePlural }} ? 'is-danger' : ''"
                  :message="errors.{{ relation.names.camelCasePlural }}"
                  horizontal
                >
                  <b-taginput
                    v-model="form.{{ relation.names.camelCasePlural }}"
                    field="{{ relationModel.defaultColumn }}"
                    :data="filtered{{ relationModel.names.pascalCasePlural }}"
                    expanded
                    autocomplete
                    open-on-focus
                    @typing="getFiltered{{ relationModel.names.pascalCasePlural }}"
                  >
                  </b-taginput>
                </b-field>
              @else
                // Debug: Relation: {{ relation.modelNames.camelCase }}. Table: {{ table.name }}
              @endif
            @endeach

            <div class="is-flex is-justify-content-flex-end">
              <b-button type="is-primary" native-type="submit" :loading="isLoading">
                @{{ editMode.enabled ? 'Update' : 'Create' }} {{
                  capitalCase(table.names.pascalCase)
                }}
              </b-button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>
</template>

<script>
import { mapState, mapActions } from 'vuex';
import ValidationException from '../exceptions/ValidationException';

export default {
  name: '{{ table.names.pascalCase }}Create',
  created() {
    @each(relation in nonAuthBelongsToRelations)
      this.{{ relation.modelNames.camelCase }}IndexAction();
    @endeach
    @each(relation in table.relations.filter(
      r => r.type === 'ManyToMany' && r.showInputOnCreatePage)
    )
      this.{{ relation.modelNames.camelCase }}Index();
    @endeach
    if (this.$route.params.id) {
      const id = parseInt(this.$route.params.id, 10);
      this.editMode.enabled = true;
      this.editMode.id = id;
      @if(table.columns.find(column => column.type !== 'File') || hasM2MRelationOnCreatePage)
        @if(hasM2MRelationOnCreatePage)
          this.show();
        @else
          const {{ table.names.camelCase }} = this.{{
            table.names.camelCasePlural
          }}.find((t) => t.id === id);
          if (!{{ table.names.camelCase }}) {
            return this.show();
          }
          @each(column in exposedColumns.filter(c =>!c.secret && c.type !== 'File'))~
            @if(column.type === 'Date')
              this.form.{{ column.names.camelCase }} = new Date({{
                table.names.camelCase
              }}.{{ column.names.camelCase }});
            @else
              this.form.{{ column.names.camelCase }} = {{
                table.names.camelCase
              }}.{{ column.names.camelCase }};
            @endif
          @endeach
          @each(relation in nonAuthBelongsToRelations)
            this.form.{{ relation.names.camelCase }}Id = {{
              table.names.camelCase
            }}.{{ relation.names.camelCase }}Id;
          @endeach
        @endif
      @endif
    }
  },

  data() {
    return {
      editMode: {
        enabled: false,
        id: null,
      },
      errors: {},
      @each(relation in table.relations.filter(
        r => r.type === 'ManyToMany' && r.showInputOnCreatePage
      ))
        filtered{{ relation.modelNames.pascalCasePlural }}: [],
      @endeach
      form: {
        @each(column in exposedColumns)
          {{ column.names.camelCase }}: {{ column.type === 'Boolean' ? false : null }},
        @endeach
        @each(relation in nonAuthBelongsToRelations)
          {{ relation.names.camelCase }}Id: null,
        @endeach
        @if(hasM2MRelationOnCreatePage)~
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            {{ relation.names.camelCasePlural }}: [],
          @endeach
        @endif
      },
    };
  },

  methods: {
    ...mapActions('{{ table.names.camelCase }}', {
      showAction: 'show',
      storeAction: 'store',
      updateAction: 'update',
    }),
    @each(relation in nonAuthBelongsToRelations)
      ...mapActions("{{ relation.modelNames.camelCase }}", {
        {{ relation.modelNames.camelCase }}IndexAction: "index",
      }),
    @endeach
    @each(relation in table.relations.filter(
      r => r.type === 'ManyToMany' && r.showInputOnCreatePage
    ))
      ...mapActions("{{ relation.modelNames.camelCase }}", {
        {{ relation.modelNames.camelCase }}IndexAction: "index",
      }),
    @endeach

    async store() {
      try {
        @if(table.columns.find(column => column.type === 'File'))
          const payload = this.prepareRequestBody();
        @else
        const payload = {
          @each(column in exposedColumns)
            {{ column.names.camelCase }}: this.form.{{
              column.names.camelCase
            }}{{ column.type === 'Date' ? '.toISOString()' : ''}},
          @endeach
          @each(relation in nonAuthBelongsToRelations)
            {{ relation.names.camelCase }}Id: this.form.{{ relation.names.camelCase }}Id,
          @endeach
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            {{ relation.names.camelCase }}Ids: this.form.{{
              relation.names.camelCasePlural
            }}.map(({ id }) => id),
          @endeach
        }
        @endif
        await this.storeAction(payload);
        this.$router.push('/{{ table.names.camelCase }}');
        this.$buefy.toast.open({
          message: '{{ capitalCase(table.names.pascalCase) }} created',
          position: 'is-bottom-right',
          type: 'is-success',
        });
      } catch (e) {
        let message = 'Unable to create {{ noCase(table.names.pascalCase) }}';
        if (e instanceof ValidationException) {
          this.errors = e.errors;
          message = 'Validation failed';
        } else {
          console.error(e);
        }
        this.$buefy.toast.open({
          message,
          type: 'is-danger',
          position: 'is-bottom-right',
        });
      }
    },

    async show() {
      const item = await this.showAction({
        id: this.editMode.id,
        @if(hasM2MRelationOnCreatePage)
          @set('relationNames', table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ).map(r => r.names.camelCasePlural))
          filter: {
            relations: "{{ relationNames.join() }}",
          },
        @endif
      });
      @each(column in exposedColumns.filter(c =>!c.secret && c.type !== 'File'))~
        @if(column.type === 'Date')
          this.form.{{ column.names.camelCase }} = new Date(item.{{ column.names.camelCase }});
        @else
          this.form.{{ column.names.camelCase }} = item.{{ column.names.camelCase }};
        @endif
      @endeach
      @each(relation in nonAuthBelongsToRelations)
        this.form.{{ relation.names.camelCase }}Id = item.{{ relation.names.camelCase }}Id;
      @endeach
      @if(hasM2MRelationOnCreatePage)
        @each(relation in table.relations.filter(
          r => r.type === 'ManyToMany' && r.showInputOnCreatePage
        ))
          this.form.{{ relation.names.camelCasePlural }} = item.{{
            relation.names.camelCasePlural
          }};
        @endeach
      @endif
    },

    async update() {
      try {
        @if(table.columns.find(column => column.type === 'File'))
          const payload = this.prepareRequestBody();
        @else
        const payload = {
          @each(column in exposedColumns)
            {{ column.names.camelCase }}: this.form.{{
              column.names.camelCase
            }}{{ column.type === 'Date' ? '.toISOString()' : ''}},
          @endeach
          @each(relation in nonAuthBelongsToRelations)
            {{ relation.names.camelCase }}Id: this.form.{{ relation.names.camelCase }}Id,
          @endeach
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            {{ relation.names.camelCase }}Ids: this.form.{{
              relation.names.camelCasePlural
            }}.map(({ id }) => id),
          @endeach
        }
        @endif
        await this.updateAction({
          id: this.editMode.id,
          input: payload,
        });
        this.$router.push('/{{ table.names.camelCase }}');
        this.$buefy.toast.open({
          message: '{{ sentenceCase(table.names.pascalCase) }} updated',
          position: 'is-bottom-right',
          type: 'is-success'
        });
      } catch (e) {
        let message = 'Unable to update {{ noCase(table.names.pascalCase) }}';
        if (e instanceof ValidationException) {
          this.errors = e.errors;
          message = 'Validation failed';
        } else {
          console.error(e);
        }
        this.$buefy.toast.open({
          message,
          type: 'is-danger',
          position: 'is-bottom-right',
        });
      }
    },

    @if(table.columns.find(column => column.type === 'File'))
      prepareRequestBody (){
        let payload;
        if (
          @each((column, index) in fileColumns)
            this.form.{{ column.names.camelCase }} !== null{{{
              lastIndex && fileColumnsLastIndex !== lastIndex ? ' &&': ''
            }}}
          @endeach
        ) {
          payload = new FormData();
          @each(column in exposedColumns)
            if (this.form.{{ column.names.camelCase }} !== null) payload.append("{{
              column.names.camelCase
            }}", this.form.{{ column.names.camelCase }}{{
              column.type === 'Date' ? '.toISOString()' : ''
            }});
          @endeach
          @each(relation in nonAuthBelongsToRelations)
            payload.append("{{ relation.names.camelCase }}Id", this.form.{{
              relation.names.camelCase
            }}Id);
          @endeach
          @each(relation in table.relations.filter(
            r => r.type === 'ManyToMany' && r.showInputOnCreatePage
          ))
            payload.append("{{ relation.names.camelCase }}Ids", this.form.{{
              relation.names.camelCasePlural
            }}.map(({ id }) => id));
          @endeach
        } else {
          payload = {
            @each(column in exposedColumns)
              {{ column.names.camelCase }}: this.form.{{
                column.names.camelCase
              }}{{ column.type === 'Date' ? '.toISOString()' : ''}},
            @endeach
            @each(relation in nonAuthBelongsToRelations)
              {{ relation.names.camelCase }}Id: this.form.{{ relation.names.camelCase }}Id,
            @endeach
            @each(relation in table.relations.filter(
              r => r.type === 'ManyToMany' && r.showInputOnCreatePage
            ))
              {{ relation.names.camelCase }}Ids: this.form.{{
                relation.names.camelCasePlural
              }}.map(({ id }) => id),
            @endeach
          }
        }
        return payload;
      },

      onFileAdd(file, field) {
        this.form[field] = file;
      },
    @endif

    @each(relation in table.relations.filter(
      r => r.type === 'ManyToMany' && r.showInputOnCreatePage
    ))
    @set(
      'relationModel',
      ['$auth', '$nonAuth'].includes(relation.withModel) ?
        input.auth.table :
        input.tables.find((table) => table.names.camelCase === relation.modelNames.camelCase)
    )
      async {{ relation.modelNames.camelCase }}Index() {
        await this.{{ relation.modelNames.camelCase }}IndexAction({
          pageSize: 999,
          pageNo: 1,
        });
        this.filtered{{ relation.modelNames.pascalCasePlural }} = this.{{
          relation.modelNames.camelCasePlural
        }};
      },

      getFiltered{{ relation.modelNames.pascalCasePlural }}(query) {
        this.filtered{{ relation.modelNames.pascalCasePlural }} = this.{{
          relation.modelNames.camelCasePlural
        }}.filter(
          (option) => (
            option.{{
              relationModel.defaultColumn
            }}.toString().toLowerCase().indexOf(query.toLowerCase()) >= 0
          )
        );
      },
    @endeach
  },

  computed: {
    ...mapState('auth', {
      user: (state) => state.user,
    }),
    ...mapState('{{ table.names.camelCase }}', {
      {{ table.names.camelCasePlural }}: (state) => state.items,
      loading: (state) => state.loading,
    }),
    @each(relation in nonAuthBelongsToRelations)
      ...mapState('{{ relation.modelNames.camelCase }}', {
        {{ relation.modelNames.camelCasePlural }}: (state) => state.items,
      }),
    @endeach
    @each(relation in table.relations.filter(
      r => r.type === 'ManyToMany' && r.showInputOnCreatePage
    ))
      ...mapState("{{ relation.modelNames.camelCase }}", {
        {{ relation.modelNames.camelCasePlural }}: (state) => state.items,
      }),
    @endeach
    isLoading() {
      return this.loading.store || this.loading.update;
    },
  },
};
</script>
