<template>
  <section class="container section">
    <b-loading is-full-page v-model="parseLoading"></b-loading>
    <div class="level">
      <div class="level-left is-size-3">Import {{ capitalCase(table.names.pascalCase) }}</div>
      <div class="level-right">
        <b-button tag="router-link" to="/{{ table.names.camelCase }}" type="is-light">
          Back
        </b-button>
      </div>
    </div>
    <div v-if="activeScreen === 'upload'">
      <p class="mb-5 has-text-centered">
        <a :href="csvUrl">Download sample CSV file</a>
        and create all {{ pluralize(noCase(table.names.camelCase)) }} list in Excel or any other spreadsheet software and upload it
      </p>

      <form method="POST" @submit.prevent="preview">
        <section
          class="is-flex is-justify-content-center is-align-items-center"
        >
          <b-field class="file is-primary" :class="{ 'has-name': !!file }">
            <b-upload @input="preview" v-model="file" class="file-label">
              <span class="file-cta">
                <b-icon class="file-icon" icon="upload"></b-icon>
                <span class="file-label">Click to upload</span>
              </span>
              <span class="file-name" v-if="file">@{{ file.name }}</span>
            </b-upload>
          </b-field>
        </section>
      </form>
    </div>
    <div v-else>
      <h1>
        Review the following @{{ form.items.length }} items carefully and
        click upload button to start importing.
      </h1>
      <b-table v-if="form.items.length" :data="form.items">
        @each(column in table.columns.filter(column => column.type !== 'File'))
          <b-table-column field="{{
            column.names.camelCase
          }}" label="{{
            column.input.displayName || capitalCase(column.names.camelCase)
          }}" v-slot="props" {{
            ['Decimal', 'Integer'].includes(column.type) ? 'numeric' : ''
          }}>
            @if('Decimal' === column.type && column.input.decimal.step !== 'any')
              @set('decimalCount', `${column.input.decimal.step}`.split('.')[1].length)
              {{{
                `{{ props.row.${column.names.camelCase}.toFixed(${decimalCount}) }}`
              }}}
            @elseif(column.type === 'Date')
              {{{
                `new Date({{ props.row.${column.names.camelCase} }}).toLocaleString()`
              }}}
            @else
              {{{
                `{{ props.row.${column.names.camelCase} }}`
              }}}
            @endif
          </b-table-column>
        @endeach
      </b-table>
      <div class="buttons mt-5">
        <b-button
          @click="storeMany"
          :loading="loading.storeMany"
          type="is-primary"
          expanded
        >
          Start Importing
        </b-button>
      </div>
    </div>
  </section>
</template>

<script>
import { mapState, mapActions } from "vuex";
import ValidationException from "../exceptions/ValidationException";
import { API_URL } from "../constants";

const { parse } = require("csv-parse/lib/sync");

export default {
  name: "{{ table.names.pascalCase }}ImportCSV",

  data() {
    return {
      csvUrl: `${API_URL}/{{ table.names.camelCase }}/csvTemplate`,
      activeScreen: "upload",
      parseLoading: false,
      file: null,
      form: {
        items: [],
      },
    };
  },

  methods: {
    ...mapActions("{{ table.names.camelCase }}", {
      storeManyAction: "storeMany",
    }),

    async preview() {
      try {
        if (!this.file) {
          return this.$buefy.toast.open({
            message: "Select a file",
            type: "is-success",
            position: "is-bottom-right",
          });
        }
        this.parseLoading = true;
        const text = await this.file.text();
        const newItems = parse(text, {
          columns: true,
          skip_empty_lines: true,
        });
        newItems.forEach((item) => {
          const itemInput = {};
          @each(column in table.columns.filter(c => c.type !== 'File'))~
            @if(column.type === 'Integer')
              @if(column.meta.required)
                if(item.{{ column.names.camelCase }})
              @endif
              itemInput.{{ column.names.camelCase }} = parseInt(item.{{ column.names.camelCase }});
            @elseif(column.type === 'Decimal')
              @if(column.meta.required)
                if(item.{{ column.names.camelCase }})
              @endif
              itemInput.{{ column.names.camelCase }} = parseFloat(item.{{ column.names.camelCase }});
            @else
              itemInput.{{ column.names.camelCase }} = item.{{ column.names.camelCase }};
            @endif
          @endeach
          this.form.items.push(itemInput);
        });
        this.activeScreen = "preview";
        this.parseLoading = false;
        return this.$buefy.toast.open({
          message: "File Selected",
          type: "is-success",
          position: "is-bottom-right",
        });
      } catch (e) {
        this.parseLoading = false;
        console.error(e);
        this.$buefy.toast.open({
          message: "Unable to import",
          type: "is-danger",
          position: "is-bottom-right",
        });
      }
    },

    async storeMany() {
      try {
        await this.storeManyAction(JSON.parse(JSON.stringify(this.form.items)));
        this.$router.push("/{{ table.names.camelCase }}");
        this.$buefy.toast.open({
          message: "{{ capitalCase(table.names.pascalCasePlural) }} Imported Successfully",
          type: "is-success",
          position: "is-bottom-right",
        });
      } catch (e) {
        let message = "Unable to import {{ noCase(table.names.snakeCasePlural) }}";
        if (e instanceof ValidationException) {
          this.errors = e.errors;
          message = "Validation failed";
        }
        this.$buefy.toast.open({
          message,
          type: "is-danger",
          position: "is-bottom-right",
        });
      }
    },
  },

  computed: {
    ...mapState("auth", {
      user: (state) => state.user,
    }),
    ...mapState("{{ table.names.camelCase }}", {
      items: (state) => state.items,
      meta: (state) => state.meta,
      loading: (state) => state.loading,
    }),
  },
};
</script>