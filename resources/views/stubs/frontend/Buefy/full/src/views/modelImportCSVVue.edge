<template>
  <section class="container">
    <b-loading is-full-page v-model="parseLoading"></b-loading>
    <div class="section py-4">
      <div class="columns">
        <div class="column px-0">
          <div class="level">
            <div class="level-left is-size-3">
              <span v-if="activeScreen === 'preview'">
                @{{ form.items.length }} {{ capitalCase(table.names.pascalCase) }}
              </span>
              <span v-else>
                Import {{ capitalCase(table.names.pascalCase) }}
              </span>
            </div>
            <div class="level-right">
              <b-button tag="router-link" to="/{{ table.names.camelCase }}" type="is-white">
                Back
              </b-button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="section py-4">
      <div class="columns box py-0">
        <div class="column">
          <b-field label="Page Size">
            <b-select
              v-model="currentPageSize"
              placeholder="Select page size"
              expanded
            >
              <option
                v-for="(option, index) in [10, 100, 500, 1000]"
                :value="option"
                :key="index"
              >
                @{{ option }}
              </option>
            </b-select>
          </b-field>
        </div>
        <div class="column">
          <b-field label="Show Data">
            <b-select
              v-model="validationFilter"
              placeholder="Show data"
              expanded
            >
              <option
                v-for="(option, index) in ['all', 'valid', 'invalid']"
                :value="option"
                :key="index"
              >
                <span class="is-capitalized">@{{ capitalize(option) }}</span>
              </option>
            </b-select>
          </b-field>
        </div>
      </div>
    </div>

    <div class="section py-4">
      <div class="columns box">
        <div class="column">
          <div v-if="activeScreen === 'upload'">
            <p class="mb-5 has-text-centered">
              <a :href="csvUrl">Download sample CSV file</a>
              and create all {{
                pluralize(noCase(table.names.camelCase))
              }} list in Excel or any other spreadsheet software and upload it
            </p>

            <form method="POST" @submit.prevent="preview">
              <section
                class="is-flex is-justify-content-center is-align-items-center"
              >
                <b-field class="file is-primary" :class="{ 'has-name': !!file }">
                  <b-upload @input="preview" v-model="file" class="file-label">
                    <span class="file-cta">
                      <b-icon class="file-icon" icon="upload"></b-icon>
                      <span class="file-label">Click to upload</span>
                    </span>
                    <span class="file-name" v-if="file">@{{ file.name }}</span>
                  </b-upload>
                </b-field>
              </section>
            </form>
          </div>
          <div v-else>
            <div class="section px-0 pb-5 pt-1">
              <h1 class="is-size-4 has-text-centered">
                <span v-if="haveValidationErrors">
                  Please upload a file without validation errors.
                </span>
                <span v-else>
                  Review the following @{{ form.items.length }} items
                  <em>carefully</em> and click upload button to start importing.
                </span>
              </h1>
            </div>
            <b-table
              v-if="
                filteredItems.length && filteredItems.length <= currentPageSize
              "
              :data="filteredItems"
              :row-class="
                (row) =>
                  row.hasValidationErrors && 'has-background-danger-light'
              "
            >
              @each(column in table.columns.filter(column => column.type !== 'File'))
                <b-table-column field="{{
                  column.names.camelCase
                }}" label="{{
                  column.input?.displayName || capitalCase(column.names.camelCase)
                }}" v-slot="props" {{
                  ['Decimal', 'Integer'].includes(column.type) ? 'numeric' : ''
                }}>
                  @if('Decimal' === column.type && column.input?.decimal.step !== 'any')
                    @set('decimalCount', `${column.input?.decimal.step}`.split('.')[1].length)
                    {{{
                      `{{ props.row.${column.names.camelCase}.toFixed(${decimalCount}) }}`
                    }}}
                    @!component(
                      `stubs/frontend/${input.tech.frontend}/full/src/views/components/csvRequiredTooltip`, {
                      column,
                    })
                  @elseif(column.type === 'Date')
                    {{{
                      `new Date({{ props.row.${column.names.camelCase} }}).toLocaleString()`
                    }}}
                    @!component(
                      `stubs/frontend/${input.tech.frontend}/full/src/views/components/csvRequiredTooltip`, {
                      column,
                    })
                  @else
                    {{{
                      `{{ props.row.${column.names.camelCase} }}`
                    }}}
                    @!component(
                      `stubs/frontend/${input.tech.frontend}/full/src/views/components/csvRequiredTooltip`, {
                      column,
                    })
                    <b-tooltip
                      v-for="(error, errorIndex) in props.row.validationErrors.name"
                      :key="errorIndex"
                      :label="error"
                      type="is-danger"
                    >
                      <b-icon
                        size="is-small"
                        type="is-danger"
                        icon="alert-circle-outline"
                      ></b-icon>
                    </b-tooltip>
                  @endif
                </b-table-column>
              @endeach
            </b-table>
            <div class="buttons mt-5">
              <b-button
                @click="storeMany"
                :loading="loading.storeMany"
                type="is-primary"
                expanded
                :disabled=haveValidationErrors
              >
                {{{
                  `{{ haveValidationErrors ? 'Please upload a file without errors' : 'Start Importing' }}`
                }}}
              </b-button>
              <b-button @click="resetPage" expanded>Cancel</b-button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</template>

<script>
import { mapState, mapActions } from "vuex";
import { parse } from "csv-parse/browser/esm/sync";
import capitalize from "lodash/capitalize";
import ValidationException from "../exceptions/ValidationException";
import { API_URL } from "../constants";

export default {
  name: "{{ table.names.pascalCase }}ImportCSV",

  data() {
    return {
      currentPageSize: 10,
      pageSizeLimit: 1000,
      validationFilter: "all",
      csvUrl: `${API_URL}/{{ table.names.camelCase }}/csvTemplate`,
      activeScreen: "upload",
      parseLoading: false,
      file: null,
      haveValidationErrors: false, // Set to true if there are validation errors in data
      form: {
        items: [],
      },
    };
  },

  methods: {
    ...mapActions("{{ table.names.camelCase }}", {
      storeManyAction: "storeMany",
    }),

    async preview() {
      try {
        if (!this.file) {
          return this.$buefy.toast.open({
            message: "Select a file",
            type: "is-success",
            position: "is-bottom-right",
          });
        }
        this.parseLoading = true;
        const text = await this.file.text();
        const newItems = parse(text, {
          columns: true,
          skip_empty_lines: true,
        });
        newItems.forEach((item) => {
          const itemInput = {
            hasValidationErrors: false,
            validationErrors: [],
          };
          @each(column in table.columns.filter(c => c.type !== 'File'))~
            @if(column.type === 'Integer')
              @if(column.meta.required)
                if(item.{{ column.names.camelCase }})
              @endif
              itemInput.{{ column.names.camelCase }} = parseInt(item.{{
                column.names.camelCase
              }});
              itemInput.validationErrors.{{ column.names.camelCase }} = [];
            @elseif(column.type === 'Decimal')
              @if(column.meta.required)
                if(item.{{ column.names.camelCase }})
              @endif
              itemInput.{{ column.names.camelCase }} = parseFloat(item.{{
                column.names.camelCase
              }});
              itemInput.validationErrors.{{ column.names.camelCase }} = [];
            @else
              itemInput.{{ column.names.camelCase }} = item.{{ column.names.camelCase }};
              itemInput.validationErrors.{{ column.names.camelCase }} = [];
            @endif

            @if(column.type === 'String' && column.meta.minLength)
              if (this.isFailingMinLengthValidation(item.{{ column.names.camelCase }}, {{ column.meta.minLength }})) {
                itemInput.hasValidationErrors = true;
                itemInput.validationErrors.{{ column.names.camelCase }}.push("Minimum length should be {{ column.meta.minLength }} characters");
              }
            @endif

            @if(column.type === 'String' && column.meta.maxLength)
              if (this.isFailingMaxLengthValidation(item.{{ column.names.camelCase }}, {{ column.meta.min }})) {
                itemInput.hasValidationErrors = true;
                itemInput.validationErrors.{{ column.names.camelCase }}.push("Maximum length should be {{ column.meta.min }} characters");
              }
            @endif

            @if(column.type === 'Integer' && column.meta.min !== undefined)
              if (this.isFailingMinValidation(item.{{ column.names.camelCase }}, {{ column.meta.min }}))) {
                itemInput.hasValidationErrors = true;
                itemInput.validationErrors.{{ column.names.camelCase }}.push("Minimum allowed value is {{ column.meta.min }}");
              }
            @endif

            @if(column.type === 'Integer' && column.meta.max !== undefined)
              if (this.isFailingMinValidation(item.{{ column.names.camelCase }}, {{ column.meta.min }}))) {
                itemInput.hasValidationErrors = true;
                itemInput.validationErrors.{{ column.names.camelCase }}.push("Maximum allowed value is {{ column.meta.max }}");
              }
            @endif
          @endeach
          this.form.items.push(itemInput);
        });
        if (this.form.items > this.pageSizeLimit) {
          this.currentPageSize === 1000;
        }
        this.activeScreen = "preview";
        this.parseLoading = false;
        return this.$buefy.toast.open({
          message: "File Selected and processed",
          type: "is-success",
          position: "is-bottom-right",
        });
      } catch (e) {
        this.parseLoading = false;
        console.error(e);
        this.$buefy.toast.open({
          message: "Unable to import",
          type: "is-danger",
          position: "is-bottom-right",
        });
      }
    },

    resetPage() {
      this.currentPageSize = 10;
      this.pageSizeLimit = 1000;
      this.validationFilter = "all";
      this.csvUrl = `${API_URL}/{{ table.names.camelCase }}/csvTemplate`;
      this.activeScreen = "upload";
      this.parseLoading = false;
      this.file = null;
      this.haveValidationErrors = false; // Set to true if there are validation errors in data
      this.form.items = [];
    },

    async storeMany() {
      try {
        await this.storeManyAction({
          inputs: JSON.parse(JSON.stringify(this.form.items)),
        });
        this.$router.push("/{{ table.names.camelCase }}");
        this.$buefy.toast.open({
          message: "{{ capitalCase(table.names.pascalCasePlural) }} Imported Successfully",
          type: "is-success",
          position: "is-bottom-right",
        });
      } catch (e) {
        let message = "Unable to import {{ noCase(table.names.snakeCasePlural) }}";
        if (e instanceof ValidationException) {
          this.errors = e.errors;
          message = "Validation failed";
        }
        this.$buefy.toast.open({
          message,
          type: "is-danger",
          position: "is-bottom-right",
        });
      }
    },

    // Validators, returns true if invalid
    isFailingRequiredValidation(value) {
      const result = value === null || value === undefined;
      if (result) {
        this.haveValidationErrors = true;
        return true;
      }
      return false;
    },

    isFailingMinLengthValidation(value, minLength) {
      const result = value.length < minLength;
      if (result) {
        this.haveValidationErrors = true;
        return true;
      }
      return false;
    },

    isFailingMaxLengthValidation(value, maxLength) {
      const result = value.length > maxLength;
      if (result) {
        this.haveValidationErrors = true;
        return true;
      }
      return false;
    },

    isFailingMinValidation(value, min) {
      const result = value < min;
      if (result) {
        this.haveValidationErrors = true;
        return true;
      }
      return false;
    },

    isFailingMaxValidation(value, max) {
      const result = value > max;
      if (result) {
        this.haveValidationErrors = true;
        return true;
      }
      return false;
    },

    capitalize,
  },

  computed: {
    ...mapState("auth", {
      user: (state) => state.user,
    }),

    ...mapState("{{ table.names.camelCase }}", {
      items: (state) => state.items,
      meta: (state) => state.meta,
      loading: (state) => state.loading,
    }),

    filteredItems() {
      if (this.validationFilter === "all") {
        return this.form.items.slice(0, this.currentPageSize - 1);
      }
      if (this.validationFilter === "valid") {
        return this.form.items
          .filter((i) => i.hasValidationErrors === false)
          .slice(0, this.currentPageSize - 1);
      }
      return this.form.items
        .filter((i) => i.hasValidationErrors)
        .slice(0, this.currentPageSize - 1);
    },
  },
};
</script>
