@set('containsUnderscoreColumn', table.columns.find(c => c.columnName.indexOf('_') >= 0))
import HttpService from '../../services/http.service';
@if(!input.camelCaseStrategy)
  import HelperService from "../../services/helper.service";
@endif
import ValidationException from '../../exceptions/ValidationException';

const resource = '{{ table.names.camelCase }}';
@if(!input.camelCaseStrategy && containsUnderscoreColumn)

  const toCamelCaseAttributes = (item) => {
    @each(column in table.columns.filter(c => c.columnName.indexOf('_') >= 0))
      item.{{ column.names.camelCase }} = item.{{ column.names.snakeCase }};
      delete item.{{ column.names.snakeCase }};
    @endeach
    return item;
  };

  const fromCamelCaseAttributes = (item) => {
    @each(column in table.columns.filter(c => c.columnName.indexOf('_') >= 0))
      item.{{ column.names.snakeCase }} = item.{{ column.names.camelCase }};
      delete item.{{ column.names.camelCase }};
    @endeach
    return item;
  };

@endif
export default {
  namespaced: true,

  state: () => ({
    loading: {
      index: false,
      store: false,
      update: false,
      destroy: false,
      storeMany: false,
    },
    meta: {},
    items: [],
  }),

  getters: {},

  actions: {
    bootstrap({ state, commit }) {
      for (const key in state.loading) {
        commit("setLoading", { key: key, value: false });
      }
    },

    async index({ commit }, filter) {
      commit('setLoading', { key: 'index', value: true });
      try {
        const { data: items, meta } = await HttpService.authGet(`/${resource}`, filter);
        commit('load', {
          @if(containsUnderscoreColumn)
            items: items.map((item) => toCamelCaseAttributes(item)),
          @else
            items,
          @endif
          @if(!input.camelCaseStrategy)
            meta: HelperService.camelizeKeys(meta),
          @else
            meta,
          @endif
        });
        commit('setLoading', { key: 'index', value: false });
      } catch (e) {
        commit('setLoading', { key: 'index', value: false });
        console.error(e);
      }
    },

    async store({ commit }, input) {
      commit('setLoading', { key: 'store', value: true });
      try {
        const item = await HttpService.authPost(
          `/${resource}`,
          @if(containsUnderscoreColumn)
            fromCamelCaseAttributes(input)
          @else
            input
          @endif
        );
        commit('setLoading', { key: 'store', value: false });
        commit(
          'add',
          @if(containsUnderscoreColumn)
            toCamelCaseAttributes(item)
          @else
            item
          @endif
        );
      } catch (e) {
        commit('setLoading', { key: 'store', value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    async storeMany({ commit }, inputs) {
      commit('setLoading', { key: 'storeMany', value: true });
      try {
        const items = await HttpService.authPost(
          `/${resource}/store/many`, {
          @if(containsUnderscoreColumn)
            items: inputs.map(i => fromCamelCaseAttributes(i))
          @else
            items: inputs
          @endif
        });
        commit('setLoading', { key: 'storeMany', value: false });
        commit(
          'addMany',
          @if(containsUnderscoreColumn)
            items.map((item) => toCamelCaseAttributes(item))
          @else
            items
          @endif
        );
      } catch (e) {
        commit('setLoading', { key: 'storeMany', value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    async update({ commit }, { id, input }) {
      commit('setLoading', { key: 'update', value: true });
      try {
        const item = await HttpService.authPut(
          `/${resource}/${id}`,
          @if(containsUnderscoreColumn)
            fromCamelCaseAttributes(input)
          @else
            input
          @endif
        );
        commit(
          'replace', {
            id,
            @if(containsUnderscoreColumn)
              item: toCamelCaseAttributes(item)
            @else
              item
            @endif
          }
        );
        commit('setLoading', { key: 'update', value: false });
      } catch (e) {
        commit('setLoading', { key: 'update', value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    async destroy({ commit }, id) {
      commit('setLoading', { key: 'destroy', value: true });
      try {
        await HttpService.authDelete(`/${resource}/${id}`);
        commit('remove', id);
        commit('setLoading', { key: 'destroy', value: false });
      } catch (e) {
        commit('setLoading', { key: 'destroy', value: false });
        throw e;
      }
    },
  },

  mutations: {
    load(state, { items, meta }) {
      state.meta = meta;
      state.items = items;
    },

    add(state, item) {
      state.items.push(item);
    },

    addMany(state, items) {
      state.items.push(...items);
    },

    remove(state, id) {
      const index = state.items.findIndex((t) => t.id === id);
      if (index !== -1) state.items.splice(index, 1);
    },

    replace(state, { id, item }) {
      const index = state.items.findIndex((t) => t.id === id);
      if (index !== -1) state.items.splice(index, 1, item);
    },

    setLoading(state, { key, value }) {
      state.loading[key] = value;
    },
  },
};
