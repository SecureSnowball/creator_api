import HttpService from '../../services/http.service';
import LocalStorageService from '../../services/localStorage.service';
import ValidationException from '../../exceptions/ValidationException';

export default {
  namespaced: true,

  state: () => ({
    loading: {
      login: false,
      @if(input.auth.register)
      register: false,
      @endif
      logout: false,
      @if(input.auth.passwordReset)
      forgotPasswordRequest: false,
      forgotPasswordVerify: false,
      forgotPasswordUpdate: false,
      @endif
    },
    token: null, // Authorization token
    user: null, // Logged in user
  }),

  actions: {
    // Initialize state from localStorage
    bootstrap({ commit }) {
      try {
        const token = LocalStorageService.getAuthToken();
        if (token) {
          const user = LocalStorageService.getJSON('user');
          commit('setTokens', { token: token, user });
        }
      } catch (e) { console.error(e); }
    },

    setUserToken({ commit }, { user, token }) {
      LocalStorageService.setJSON('user', user);
      LocalStorageService.setAuthToken(token);
      commit('setUserToken', { user, token });
    },

    unsetTokens({ commit }) {
      LocalStorageService.clear();
      commit('unsetTokens');
    },

    async login({ dispatch, commit }, input) {
      try {
        commit('setLoading', { key: 'login', value: true });
        const { user, token } = await HttpService.post('/login', input);
        dispatch('setUserToken', { token, user });
        commit('setLoading', { key: 'login', value: false });
      } catch (e) {
        commit('setLoading', { key: 'login', value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    @if(input.auth.register)
    async register({ commit, dispatch }, input) {
      commit('setLoading', { key: 'register', value: true });
      try {
        const { user, token } = await HttpService.post('/register', input);
        dispatch('setUserToken', { token, user });
        commit('setLoading', { key: 'register', value: false });
      } catch (e) {
        commit('setLoading', { key: 'register', value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },
    @endif

    async logout({ dispatch }) {
      await HttpService.post('/logout');
      dispatch('unsetTokens');
    },

    @if(input.auth.passwordReset)
    async forgotPasswordRequest({ commit }, input) {
      commit("setLoading", { key: "forgotPasswordRequest", value: true });
      try {
        const message = await HttpService.post(
          "/password/forget/request",
          input
        );
        commit("setLoading", { key: "forgotPasswordRequest", value: false });
        return message;
      } catch (e) {
        commit("setLoading", { key: "forgotPasswordRequest", value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    async forgotPasswordVerify({ commit }, input) {
      commit("setLoading", { key: "forgotPasswordVerify", value: true });
      try {
        const message = await HttpService.post(
          "/password/forget/verify",
          input
        );
        commit("setLoading", { key: "forgotPasswordVerify", value: false });
        return message;
      } catch (e) {
        commit("setLoading", { key: "forgotPasswordVerify", value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },

    async forgotPasswordUpdate({ commit }, input) {
      commit("setLoading", { key: "forgotPasswordUpdate", value: true });
      try {
        const message = await HttpService.post(
          "/password/forget/update",
          input
        );
        commit("setLoading", { key: "forgotPasswordUpdate", value: false });
        return message;
      } catch (e) {
        commit("setLoading", { key: "forgotPasswordUpdate", value: false });
        if (e.response && e.response.status === 422) {
          throw new ValidationException(e.message, e.response.data.errors);
        }
        throw e;
      }
    },
    @endif
  },

  mutations: {
    setUserToken(state, { token, user }) {
      state.token = token;
      state.user = user;
    },

    unsetTokens(state) {
      state.token = null;
      state.user = null;
    },

    setUser(state, user) {
      state.user = user;
    },

    setTokens(state, { user, token }) {
      state.token = token;
      state.user = user;
    },

    setLoading(state, { key, value }) {
      state.loading[key] = value;
    },
  },
};
