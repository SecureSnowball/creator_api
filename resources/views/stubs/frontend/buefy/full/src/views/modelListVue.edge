<template>
  <section class="container mt-5">
    <b-loading is-full-page v-model="isLoading"></b-loading>
    <div class="level">
      <div class="level-left is-size-3">@{{ items.length }} {{ table.names.pascalCasePlural }}</div>
      @if(table.operations.includes('storeMany'))
      <div class="level-right">
        <b-dropdown aria-role="list" class="mx-1">
          <template #trigger="{ active }">
            <b-button
              label="Import From"
              type="is-primary"
              :icon-right="active ? 'menu-up' : 'menu-down'"
            />
          </template>
          <b-dropdown-item @click="$router.push('/{{ table.names.camelCase }}/import/csv')" aria-role="listitem">CSV</b-dropdown-item>
        </b-dropdown>
        <b-button tag="router-link" to="/{{ table.names.camelCase }}/create" type="is-light">New</b-button>
      </div>
      @endif
    </div>
    <b-table v-if="items.length" :data="items">
      <b-table-column field="name" label="Name" v-slot="props">
        @{{ props.row.name }}
      </b-table-column>
      <b-table-column field="email" label="Email" v-slot="props">
        @{{ props.row.email }}
      </b-table-column>
      <b-table-column field="mobile" label="Mobile" v-slot="props">
        @{{ props.row.mobile }}
      </b-table-column>
      <b-table-column field="currency" label="Currency" v-slot="props">
        @{{ props.row.currency }}
      </b-table-column>
      <b-table-column label="Action" v-slot="props">
         <b-dropdown aria-role="list">
            <template #trigger="{ active }">
              <b-button
                label="More"
                type="is-primary"
                outlined
                :icon-right="active ? 'menu-up' : 'menu-down'"
              />
            </template>
            <b-dropdown-item @click="edit(props.row.id)" aria-role="edititem">Edit</b-dropdown-item>
            <b-dropdown-item @click="destroy(props.row.id)" aria-role="listitem">Delete</b-dropdown-item>
        </b-dropdown>
      </b-table-column>
    </b-table>
    <div class="hero is-medium" v-else>
      <div class="hero-body container is-flex has-text-centered">
        <div class="is-flex-direction-colomn">
          <h1 class="is-size-2">Create a {{ table.names.pascalCase }}</h1>
          <p class="is-size-4">Click new to create your first {{ table.names.camelCase }}</p>
          <b-button
            type="is-primary block mt-5"
            tag="router-link"
            to="/{{ table.names.camelCase }}/create"
          >
            New
          </b-button>
        </div>
      </div>
    </div>
    <b-pagination
      :total="meta.total"
      v-model="current"
      order="is-centered"
      :per-page="meta.per_page"
      aria-next-label="Next page"
      aria-previous-label="Previous page"
      aria-page-label="Page"
      aria-current-label="Current page">
    </b-pagination>
  </section>
</template>

<script>
import { mapActions, mapState } from 'vuex';

export default {
  name: '{{ table.names.pascalCase }}List',

  data() {
    return {
      current: 1,
      editMode: {
        {{ table.names.camelCase }}Id: null,
      },
    };
  },

  created() {
    this.index();
  },

  methods: {
    ...mapActions('{{ table.names.camelCase }}', {
      indexAction: 'index',
      storeAction: 'store',
      destroyAction: 'destroy',
    }),

    index() {
      this.indexAction({
        size: 1000,
        page: this.current,
      });
    },

    edit({{ table.names.camelCase }}Id) {
      this.$router.push(`/{{ table.names.camelCase }}/${ {{ table.names.camelCase }}Id}/edit`);
    },

    destroy(id) {
      this.$buefy.dialog.confirm({
        title: 'Deleting {{ table.names.pascalCase }}',
        message: 'Are you sure you want to <b>delete</b> this {{ table.names.camelCase }}? Only unused {{ table.names.camelCase }} can be deleted',
        confirmText: 'Delete {{ table.names.pascalCase }}',
        type: 'is-danger',
        hasIcon: true,
        onConfirm: async () => {
          try {
            await this.destroyAction(id);
            this.$buefy.toast.open({
              message: 'Deleted',
              type: 'is-succes',
              position: 'is-bottom-right',
            });
          } catch(e) {
            console.error(e);
            this.$buefy.toast.open({
              message: 'Unable to delte',
              type: 'is-danger',
              position: 'is-bottom-right',
            });
          }
        },
      });
    },
  },

  watch: {
    async current() {
      return this.index();
    },
  },

  computed: {
    ...mapState('auth', {
      user: (state) => state.user,
    }),
    ...mapState('{{ table.names.camelCase }}', {
      items: (state) => state.items,
      meta: (state) => state.meta,
      loading: (state) => state.loading,
    }),
    isLoading() {
      return this.loading.index || this.loading.store || this.loading.update;
    },
  },
};
</script>
