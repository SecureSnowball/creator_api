import axios from 'axios';

class HttpService {
  constructor() {
    this.client = axios.create({
      baseURL: `${process.env.VUE_APP_API_URL}/api`,
    });
  }

  async get(url, queryParams) {
    const { data } = await this.client.get(url, {
      params: queryParams,
    });
    return data;
  }

  async post(url, payload, queryParams) {
    const { data } = await this.client.post(url, payload, {
      params: queryParams,
    });
    return data;
  }

  async authGet(url, queryParams) {
    const token = localStorage.getItem('authToken');
    const { data } = await this.client.get(url, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
      },
    });
    return data;
  }

  async authPost(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const { data } = await this.client.post(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
      },
    });
    return data;
  }

  async authPatch(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const { data } = await this.client.patch(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
      },
    });
    return data;
  }

  async authPut(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const { data } = await this.client.put(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
      },
    });
    return data;
  }

  async authDelete(url, queryParams) {
    const token = localStorage.getItem('authToken');
    const { data } = await this.client.delete(url, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
      },
    });
    return data;
  }

  @if(this.projectInput.tenantSettings.tenant !== 0)
  async tenantGet(url, queryParams) {
    const token = localStorage.getItem('authToken');
    const {{
      input.tenant.names.camelCase
    }}Token = localStorage.getItem('{{
      input.tenant.names.camelCase
    }}Token');
    const { data } = await this.client.get(url, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
        'x-{{ input.tenant.names.dashCase }}-id': tenantToken,
      },
    });
    return data;
  }

  async tenantPost(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const {{
      input.tenant.names.camelCase
    }}Token = localStorage.getItem('{{
      input.tenant.names.camelCase
    }}Token');
    const { data } = await this.client.post(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
        'x-{{ input.tenant.names.dashCase }}-id': tenantToken,
      },
    });
    return data;
  }

  async tenantPatch(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const {{
      input.tenant.names.camelCase
    }}Token = localStorage.getItem('{{
      input.tenant.names.camelCase
    }}Token');
    const { data } = await this.client.patch(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
        'x-{{ input.tenant.names.dashCase }}-id': tenantToken,
      },
    });
    return data;
  }

  async tenantPut(url, payload, queryParams) {
    const token = localStorage.getItem('authToken');
    const {{
      input.tenant.names.camelCase
    }}Token = localStorage.getItem('{{
      input.tenant.names.camelCase
    }}Token');
    const { data } = await this.client.put(url, payload, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
        'x-{{ input.tenant.names.dashCase }}-id': tenantToken,
      },
    });
    return data;
  }

  async tenantDelete(url, queryParams) {
    const token = localStorage.getItem('authToken');
    const {{
      input.tenant.names.camelCase
    }}Token = localStorage.getItem('{{
      input.tenant.names.camelCase
    }}Token');
    const { data } = await this.client.delete(url, {
      params: queryParams,
      headers: {
        authorization: `Bearer ${token}`,
        'x-{{ input.tenant.names.dashCase }}-id': tenantToken,
      },
    });
    return data;
  }
  @endif
}

export default new HttpService();
